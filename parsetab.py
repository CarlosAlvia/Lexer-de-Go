
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : funcionfuncion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA argumentos\n                  | argumentoVariadico COMMA argumentosargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato subcodigo : asignacionCorta\n                  | asignacionsentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigoestructurasDeDatos : mapamapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE\n            | MAP LBRACKET tipoDato RBRACKET tipoDatomapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAasignacion : VAR ID tipoDato ASSIGN valorasignacion : VAR ID ASSIGN valorasignacionCorta : ID DOSPUNTOS ASSIGN valortipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUAL\n                    | EQUALempty :'
    
_lr_action_items = {'FUNC':([0,],[3,]),'$end':([1,2,32,],[0,-1,-2,]),'ID':([3,5,18,19,21,29,34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[4,6,6,6,25,33,37,37,37,37,37,37,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,37,37,-60,-61,37,37,37,37,-29,]),'LPAREN':([4,34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[5,50,50,50,50,50,50,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,50,50,-60,-61,50,50,50,50,-29,]),'PUNTO':([6,11,20,],[11,20,24,]),'FLOAT64_TYPE':([6,24,33,72,84,],[12,12,12,12,12,]),'COMPLEX64_TYPE':([6,24,33,72,84,],[13,13,13,13,13,]),'INT_TYPE':([6,24,33,72,84,],[14,14,14,14,14,]),'BOOL_TYPE':([6,24,33,72,84,],[15,15,15,15,15,]),'STRING_TYPE':([6,24,33,72,84,],[16,16,16,16,16,]),'RPAREN':([7,8,9,10,12,13,14,15,16,22,23,30,37,39,40,41,42,43,44,45,46,47,48,49,74,75,76,78,80,83,85,86,88,92,],[17,-3,-4,-7,-33,-34,-35,-36,-37,-5,-6,-8,-47,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,-51,-62,-50,-59,-63,85,-52,-25,-24,-26,]),'COMMA':([8,9,10,12,13,14,15,16,30,37,39,40,41,42,43,44,45,46,47,48,49,74,75,76,78,80,85,86,88,92,95,],[18,19,-7,-33,-34,-35,-36,-37,-8,-47,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,-51,-62,-50,-59,-63,-52,-25,-24,-26,96,]),'ASSIGN':([12,13,14,15,16,31,33,35,],[-33,-34,-35,-36,-37,34,36,52,]),'RBRACKET':([12,13,14,15,16,82,],[-33,-34,-35,-36,-37,84,]),'LBRACE':([12,13,14,15,16,17,86,],[-33,-34,-35,-36,-37,21,87,]),'PLUS':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,56,-40,-41,-42,-43,-44,-45,-46,-48,56,-58,-23,56,56,56,56,56,-45,56,-46,56,-43,56,-52,-25,-24,56,-26,56,]),'MINUS':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,57,-40,-41,-42,-43,-44,-45,-46,-48,57,-58,-23,57,57,57,57,57,-45,57,-46,57,-43,57,-52,-25,-24,57,-26,57,]),'TIMES':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,58,-40,-41,-42,-43,-44,-45,-46,-48,58,-58,-23,58,58,58,58,58,-45,58,-46,58,-43,58,-52,-25,-24,58,-26,58,]),'DIVIDE':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,59,-40,-41,-42,-43,-44,-45,-46,-48,59,-58,-23,59,59,59,59,59,-45,59,-46,59,-43,59,-52,-25,-24,59,-26,59,]),'MOD':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,60,-40,-41,-42,-43,-44,-45,-46,-48,60,-58,-23,60,60,60,60,60,-45,60,-46,60,-43,60,-52,-25,-24,60,-26,60,]),'NOT_EQUAL':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,61,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,61,61,61,61,61,-45,61,-46,61,-43,61,-52,-25,-24,61,-26,61,]),'LESS_THAN':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,62,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,62,62,62,62,62,-45,62,-46,62,-43,62,-52,-25,-24,62,-26,62,]),'LESS_EQUAL':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,63,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,63,63,63,63,63,-45,63,-46,63,-43,63,-52,-25,-24,63,-26,63,]),'GREATER_THAN':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,64,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,64,64,64,64,64,-45,64,-46,64,-43,64,-52,-25,-24,64,-26,64,]),'GREATER_EQUAL':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,65,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,65,65,65,65,65,-45,65,-46,65,-43,65,-52,-25,-24,65,-26,65,]),'EQUAL':([12,13,14,15,16,37,38,39,40,41,42,43,44,45,46,47,48,49,53,71,73,74,75,76,77,78,79,80,83,85,86,88,91,92,95,],[-33,-34,-35,-36,-37,-47,66,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,66,66,66,66,66,-45,66,-46,66,-43,66,-52,-25,-24,66,-26,66,]),'RBRACE':([12,13,14,15,16,26,27,28,37,38,39,40,41,42,43,44,45,46,47,48,49,53,73,74,75,76,78,80,85,86,87,88,89,90,92,93,96,],[-33,-34,-35,-36,-37,32,-9,-10,-47,-32,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,-31,-30,-51,-62,-50,-59,-63,-52,-25,88,-24,92,-27,-26,-28,-29,]),'AND':([12,13,14,15,16,37,39,40,41,42,43,44,45,46,47,48,49,74,75,76,78,80,85,86,88,92,],[-33,-34,-35,-36,-37,-47,-40,-41,-42,-43,-44,-45,-46,-48,-49,69,-23,-51,-62,-50,-59,-63,-52,-25,-24,-26,]),'OR':([12,13,14,15,16,37,39,40,41,42,43,44,45,46,47,48,49,74,75,76,78,80,85,86,88,92,],[-33,-34,-35,-36,-37,-47,-40,-41,-42,-43,-44,-45,-46,-48,-49,70,-23,-51,-62,-50,-59,-63,-52,-25,-24,-26,]),'DOSPUNTOS':([12,13,14,15,16,25,37,39,40,41,42,43,44,45,46,47,48,49,74,75,76,78,80,85,86,88,91,92,],[-33,-34,-35,-36,-37,31,-47,-40,-41,-42,-43,-44,-45,-46,-48,-49,-58,-23,-51,-62,-50,-59,-63,-52,-25,-24,94,-26,]),'VAR':([21,],[29,]),'FLOAT64':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[39,39,39,39,39,39,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,39,39,-60,-61,39,39,39,39,-29,]),'COMPLEX64':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[40,40,40,40,40,40,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,40,40,-60,-61,40,40,40,40,-29,]),'INT':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[41,41,41,41,41,41,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,41,41,-60,-61,41,41,41,41,-29,]),'BOOL':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[42,42,42,42,42,42,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,42,80,-60,-61,42,42,42,42,-29,]),'STRING':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[43,43,43,43,43,43,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,43,43,-60,-61,43,43,43,43,-29,]),'MAP':([34,36,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,81,87,90,94,96,],[51,51,51,51,51,51,-53,-54,-55,-56,-57,-64,-65,-66,-67,-68,-69,51,51,-60,-61,51,51,51,51,-29,]),'LBRACKET':([51,],[72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'funcion':([0,],[2,]),'argumentos':([5,18,19,],[7,22,23,]),'argumento':([5,18,19,],[8,8,8,]),'argumentoVariadico':([5,18,19,],[9,9,9,]),'tipoDato':([6,24,33,72,84,],[10,30,35,82,86,]),'subcodigo':([21,],[26,]),'asignacionCorta':([21,],[27,]),'asignacion':([21,],[28,]),'valor':([34,36,50,52,54,55,67,68,81,87,90,94,],[38,53,71,73,74,75,77,79,83,91,91,95,]),'expresionesAritmeticas':([34,36,50,52,54,55,67,68,81,87,90,94,],[44,44,44,44,44,44,76,44,44,44,44,44,]),'condiciones':([34,36,50,52,54,55,67,68,81,87,90,94,],[45,45,45,45,45,45,45,78,45,45,45,45,]),'estructurasDeDatos':([34,36,50,52,54,55,67,68,81,87,90,94,],[46,46,46,46,46,46,46,46,46,46,46,46,]),'expresionAritmetica':([34,36,50,52,54,55,67,68,81,87,90,94,],[47,47,47,47,47,47,47,47,47,47,47,47,]),'condicion':([34,36,50,52,54,55,67,68,81,87,90,94,],[48,48,48,48,48,48,48,48,48,48,48,48,]),'mapa':([34,36,50,52,54,55,67,68,81,87,90,94,],[49,49,49,49,49,49,49,49,49,49,49,49,]),'operador':([38,47,53,71,73,74,75,77,79,83,91,95,],[54,67,54,81,54,54,54,54,54,54,54,54,]),'operadorComp':([38,53,71,73,74,75,77,79,83,91,95,],[55,55,55,55,55,55,55,55,55,55,55,]),'conector':([48,],[68,]),'elementosMapa':([87,90,],[89,93,]),'elementoMapa':([87,90,],[90,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',5),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',9),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',12),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',13),
  ('argumentos -> argumento COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',14),
  ('argumentos -> argumentoVariadico COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',15),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',18),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',21),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',25),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',26),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',29),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',32),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',35),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',38),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',39),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',42),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',43),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',46),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',47),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',50),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',51),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',54),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',59),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',62),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato','mapa',5,'p_definicionMapaVacio','parserGo.py',63),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',66),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',69),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',70),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',73),
  ('asignacion -> VAR ID tipoDato ASSIGN valor','asignacion',5,'p_asignacionTipo','parserGo.py',77),
  ('asignacion -> VAR ID ASSIGN valor','asignacion',4,'p_asignacionInferencia','parserGo.py',80),
  ('asignacionCorta -> ID DOSPUNTOS ASSIGN valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',83),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',86),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',87),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',88),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',89),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',90),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',93),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',94),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',97),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',98),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',99),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',100),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',101),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',102),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',103),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',104),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',105),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',109),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',110),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',113),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',114),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',117),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',118),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',119),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',120),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',121),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',125),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',126),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',129),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',130),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',133),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',134),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',137),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',138),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',139),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',140),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',141),
  ('operadorComp -> EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',142),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',145),
]
