
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FMT FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS PRINT_LN PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : asignacion\n              | sentenciaSwitch\n              | funcion\n              | funcionSinArg\n              | funcionAnonima\n              | imprimirfuncion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA\n                  | argumentoVariadico COMMAargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato funcionSinArg : FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACEfuncionAnonima : FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPARENfuncionAnonima : FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPARENsubcodigo : asignacionCorta\n                  | asignacionsentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigoestructurasDeDatos : mapa\n                        | arraymapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACEmapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAarray : LBRACKET INT RBRACKET tipoDatoasignacion : VAR ID tipoDato ASSIGN valorasignacion : VAR ID ASSIGN valorasignacionCorta : ID DOSPUNTOS ASSIGN valortipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUALempty :imprimir : FMT PUNTO PRINT_LN LPAREN valores RPAREN\n                | FMT PUNTO PRINT_LN LPAREN RPAREN'
    
_lr_action_items = {'VAR':([0,72,105,106,107,110,115,128,134,],[8,8,8,8,8,8,8,8,8,]),'SWITCH':([0,],[9,]),'FUNC':([0,],[10,]),'FMT':([0,],[11,]),'$end':([1,2,3,4,5,6,7,21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,68,79,104,118,119,120,121,123,127,139,142,147,151,153,154,155,158,159,163,],[0,-1,-2,-3,-4,-5,-6,-42,-43,-44,-45,-46,-56,-40,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-72,-39,-21,-80,-60,-71,-59,-68,-19,-79,-38,-14,-61,-20,-7,-15,-16,-33,-34,]),'ID':([8,9,10,17,20,30,31,32,39,54,59,60,72,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,110,115,124,128,129,134,157,161,165,167,],[12,13,16,37,40,66,69,37,40,40,40,40,114,40,40,40,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,40,40,-69,-70,114,114,114,114,114,40,114,40,114,40,40,40,-37,]),'LBRACE':([9,13,21,22,23,24,25,33,69,71,73,109,152,],[14,26,-42,-43,-44,-45,-46,72,108,110,115,134,157,]),'LPAREN':([10,16,20,30,38,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,136,149,157,161,165,167,],[17,32,54,54,78,54,54,54,54,54,54,54,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,54,54,-69,-70,54,54,148,156,54,54,54,-37,]),'PUNTO':([11,37,77,116,],[18,77,116,138,]),'ASSIGN':([12,19,21,22,23,24,25,27,],[20,39,-42,-43,-44,-45,-46,60,]),'FLOAT64_TYPE':([12,37,97,126,138,141,],[21,21,21,21,21,21,]),'COMPLEX64_TYPE':([12,37,97,126,138,141,],[22,22,22,22,22,22,]),'INT_TYPE':([12,37,97,126,138,141,],[23,23,23,23,23,23,]),'BOOL_TYPE':([12,37,97,126,138,141,],[24,24,24,24,24,24,]),'STRING_TYPE':([12,37,97,126,138,141,],[25,25,25,25,25,25,]),'DOSPUNTOS':([13,21,22,23,24,25,40,42,43,44,45,46,47,48,49,50,51,52,53,62,65,66,68,101,102,114,119,120,121,123,142,144,151,159,162,163,],[27,-42,-43,-44,-45,-46,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,105,106,107,-72,128,-47,27,-60,-71,-59,-68,-38,-48,-61,-33,165,-34,]),'CASE':([14,21,22,23,24,25,26,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,68,79,103,108,112,113,119,120,121,123,131,132,142,143,151,159,163,],[30,-42,-43,-44,-45,-46,59,30,-56,-40,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,59,-72,-39,-41,59,-17,-18,-60,-71,-59,-68,-24,-25,-38,-30,-61,-33,-34,]),'SEMICOLON':([15,21,22,23,24,25,40,42,43,44,45,46,47,48,49,50,51,52,53,68,103,119,120,121,123,142,151,159,163,],[31,-42,-43,-44,-45,-46,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-72,-41,-60,-71,-59,-68,-38,-61,-33,-34,]),'RPAREN':([17,21,22,23,24,25,32,34,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,68,70,74,75,76,78,102,117,119,120,121,123,140,142,144,148,150,151,156,159,163,],[33,-42,-43,-44,-45,-46,71,73,-8,-9,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-72,109,-10,-11,-12,118,-47,139,-60,-71,-59,-68,151,-38,-48,155,-13,-61,158,-33,-34,]),'PRINT_LN':([18,],[38,]),'FLOAT64':([20,30,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[42,42,42,42,42,42,42,42,42,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,42,42,-69,-70,42,42,42,42,42,-37,]),'COMPLEX64':([20,30,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[43,43,43,43,43,43,43,43,43,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,43,43,-69,-70,43,43,43,43,43,-37,]),'INT':([20,30,39,54,56,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[44,44,44,44,98,44,44,44,44,44,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,44,44,-69,-70,44,44,44,44,44,-37,]),'BOOL':([20,30,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[45,68,45,45,45,45,45,45,45,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,45,68,-69,-70,45,45,45,45,45,-37,]),'STRING':([20,30,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[46,46,46,46,46,46,46,46,46,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,46,46,-69,-70,46,46,46,46,46,-37,]),'MAP':([20,30,39,54,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[55,55,55,55,55,55,55,55,55,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,55,55,-69,-70,55,55,55,55,55,-37,]),'LBRACKET':([20,30,39,54,55,59,60,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,124,129,157,161,165,167,],[56,56,56,56,97,56,56,56,56,56,-62,-63,-64,-65,-66,-73,-74,-75,-76,-77,56,56,-69,-70,56,56,56,56,56,-37,]),'COMMA':([21,22,23,24,25,35,36,40,42,43,44,45,46,47,48,49,50,51,52,53,68,76,102,119,120,121,123,142,150,151,159,163,166,],[-42,-43,-44,-45,-46,74,75,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-72,-12,129,-60,-71,-59,-68,-38,-13,-61,-33,-34,167,]),'RBRACKET':([21,22,23,24,25,98,125,],[-42,-43,-44,-45,-46,126,141,]),'PLUS':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,82,-49,-50,-51,-52,-53,-54,-55,-57,82,-67,-31,-32,-55,-56,82,-52,82,82,82,82,82,82,-54,82,-55,82,-38,-61,-33,82,-34,82,]),'MINUS':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,83,-49,-50,-51,-52,-53,-54,-55,-57,83,-67,-31,-32,-55,-56,83,-52,83,83,83,83,83,83,-54,83,-55,83,-38,-61,-33,83,-34,83,]),'TIMES':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,84,-49,-50,-51,-52,-53,-54,-55,-57,84,-67,-31,-32,-55,-56,84,-52,84,84,84,84,84,84,-54,84,-55,84,-38,-61,-33,84,-34,84,]),'DIVIDE':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,85,-49,-50,-51,-52,-53,-54,-55,-57,85,-67,-31,-32,-55,-56,85,-52,85,85,85,85,85,85,-54,85,-55,85,-38,-61,-33,85,-34,85,]),'MOD':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,86,-49,-50,-51,-52,-53,-54,-55,-57,86,-67,-31,-32,-55,-56,86,-52,86,86,86,86,86,86,-54,86,-55,86,-38,-61,-33,86,-34,86,]),'NOT_EQUAL':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,87,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-55,-56,87,-52,87,87,87,87,87,87,-54,87,-55,87,-38,-61,-33,87,-34,87,]),'LESS_THAN':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,88,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-55,-56,88,-52,88,88,88,88,88,88,-54,88,-55,88,-38,-61,-33,88,-34,88,]),'LESS_EQUAL':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,89,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-55,-56,89,-52,89,89,89,89,89,89,-54,89,-55,89,-38,-61,-33,89,-34,89,]),'GREATER_THAN':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,90,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-55,-56,90,-52,90,90,90,90,90,90,-54,90,-55,90,-38,-61,-33,90,-34,90,]),'GREATER_EQUAL':([21,22,23,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,65,66,67,68,79,96,102,103,119,120,121,122,123,140,142,151,159,162,163,166,],[-42,-43,-44,-45,-46,-56,91,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-55,-56,91,-52,91,91,91,91,91,91,-54,91,-55,91,-38,-61,-33,91,-34,91,]),'RBRACE':([21,22,23,24,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,61,63,64,68,79,99,100,103,111,112,113,119,120,121,123,130,131,132,133,135,137,142,143,145,146,151,157,159,160,161,163,164,167,],[-42,-43,-44,-45,-46,-78,-22,-56,-40,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,-78,-28,104,-27,-23,-72,-39,127,-29,-41,136,-17,-18,-60,-71,-59,-68,-26,-24,-25,-78,147,149,-38,-30,153,154,-61,159,-33,163,-35,-34,-36,-37,]),'DEFAULT':([21,22,23,24,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,64,68,79,100,103,112,113,119,120,121,123,131,132,133,142,143,151,159,163,],[-42,-43,-44,-45,-46,62,-22,-56,-40,-49,-50,-51,-52,-53,-54,-55,-57,-58,-67,-31,-32,62,-28,-23,-72,-39,-29,-41,-17,-18,-60,-71,-59,-68,-24,-25,62,-38,-30,-61,-33,-34,]),'AND':([21,22,23,24,25,40,42,43,44,45,46,47,48,49,50,51,52,53,68,119,120,121,123,142,151,159,163,],[-42,-43,-44,-45,-46,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,94,-31,-32,-72,-60,-71,-59,-68,-38,-61,-33,-34,]),'OR':([21,22,23,24,25,40,42,43,44,45,46,47,48,49,50,51,52,53,68,119,120,121,123,142,151,159,163,],[-42,-43,-44,-45,-46,-56,-49,-50,-51,-52,-53,-54,-55,-57,-58,95,-31,-32,-72,-60,-71,-59,-68,-38,-61,-33,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'asignacion':([0,72,105,106,107,110,115,128,134,],[2,113,113,113,113,113,113,113,113,]),'sentenciaSwitch':([0,],[3,]),'funcion':([0,],[4,]),'funcionSinArg':([0,],[5,]),'funcionAnonima':([0,],[6,]),'imprimir':([0,],[7,]),'asignacionCorta':([9,72,105,106,107,110,115,128,134,],[15,112,112,112,112,112,112,112,112,]),'tipoDato':([12,37,97,126,138,141,],[19,76,125,142,150,152,]),'bloqueCasosBooleanos':([14,29,],[28,64,]),'casoBooleano':([14,29,],[29,29,]),'argumentos':([17,32,],[34,70,]),'argumento':([17,32,],[35,35,]),'argumentoVariadico':([17,32,],[36,36,]),'valor':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[41,67,79,96,102,103,102,119,120,122,67,140,102,162,162,166,]),'expresionesAritmeticas':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[47,47,47,47,47,47,47,47,47,121,47,47,47,47,47,47,]),'condiciones':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[48,65,48,48,48,48,48,48,48,48,123,48,48,48,48,48,]),'estructurasDeDatos':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'expresionAritmetica':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'condicion':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'mapa':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'array':([20,30,39,54,59,60,78,80,81,92,93,124,129,157,161,165,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'bloqueCasosSwitch':([26,58,108,],[57,100,133,]),'casoSwitch':([26,58,108,],[58,58,58,]),'casoDefault':([28,57,133,],[61,99,145,]),'empty':([28,57,133,],[63,63,63,]),'operador':([41,50,67,79,96,102,103,119,120,122,140,162,166,],[80,92,80,80,124,80,80,80,80,80,80,80,80,]),'operadorComp':([41,67,79,96,102,103,119,120,122,140,162,166,],[81,81,81,81,81,81,81,81,81,81,81,81,]),'conector':([51,],[93,]),'valores':([59,78,129,],[101,117,144,]),'subcodigo':([72,105,106,107,110,115,128,134,],[111,130,131,132,135,137,143,146,]),'elementosMapa':([157,161,],[160,164,]),'elementoMapa':([157,161,],[161,161,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> asignacion','codigo',1,'p_codigo','parserGo.py',6),
  ('codigo -> sentenciaSwitch','codigo',1,'p_codigo','parserGo.py',7),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',8),
  ('codigo -> funcionSinArg','codigo',1,'p_codigo','parserGo.py',9),
  ('codigo -> funcionAnonima','codigo',1,'p_codigo','parserGo.py',10),
  ('codigo -> imprimir','codigo',1,'p_codigo','parserGo.py',11),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',15),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',18),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',19),
  ('argumentos -> argumento COMMA','argumentos',2,'p_argumentos','parserGo.py',20),
  ('argumentos -> argumentoVariadico COMMA','argumentos',2,'p_argumentos','parserGo.py',21),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',24),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',27),
  ('funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE','funcionSinArg',7,'p_funcionSinArg','parserGo.py',31),
  ('funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',8,'p_funcion_anonima','parserGo.py',34),
  ('funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',9,'p_funcion_anonima_variadico','parserGo.py',37),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',41),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',42),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',45),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',48),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',51),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',54),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',55),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',58),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',59),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',62),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',63),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',66),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',67),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',70),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',75),
  ('estructurasDeDatos -> array','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',76),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',79),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',82),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',85),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',86),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',89),
  ('array -> LBRACKET INT RBRACKET tipoDato','array',4,'p_arrayVacio','parserGo.py',93),
  ('asignacion -> VAR ID tipoDato ASSIGN valor','asignacion',5,'p_asignacionTipo','parserGo.py',97),
  ('asignacion -> VAR ID ASSIGN valor','asignacion',4,'p_asignacionInferencia','parserGo.py',100),
  ('asignacionCorta -> ID DOSPUNTOS ASSIGN valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',103),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',106),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',107),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',108),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',109),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',110),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',113),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',114),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',117),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',118),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',119),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',120),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',121),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',122),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',123),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',124),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',125),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',129),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',130),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',133),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',134),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',137),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',138),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',139),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',140),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',141),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',145),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',146),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',149),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',150),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',153),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',154),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',157),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',158),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',159),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',160),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',161),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',164),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN','imprimir',6,'p_imprimir','parserGo.py',169),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN','imprimir',5,'p_imprimir','parserGo.py',170),
]
