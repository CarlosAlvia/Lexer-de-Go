
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : asignacion\n              | sentenciaSwitch\n              | funcionfuncion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA\n                  | argumentoVariadico COMMAargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato subcodigo : asignacionCorta\n                  | asignacionsentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigoestructurasDeDatos : mapamapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACEmapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAasignacion : VAR ID tipoDato EQUAL valorasignacion : VAR ID EQUAL valorasignacionCorta : ID DOSPUNTOS EQUAL valortipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUALempty :'
    
_lr_action_items = {'VAR':([0,85,86,87,102,112,],[5,5,5,5,5,5,]),'SWITCH':([0,],[6,]),'FUNC':([0,],[7,]),'$end':([1,2,3,4,28,29,30,31,32,33,34,35,36,37,38,39,40,54,60,84,94,95,96,98,101,120,122,124,126,130,],[0,-1,-2,-3,-48,-32,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-64,-31,-15,-52,-63,-51,-60,-13,-53,-14,-4,-26,-27,]),'ID':([5,6,7,14,24,25,26,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,86,87,99,102,103,112,125,128,132,134,],[8,9,12,28,52,55,56,28,28,28,28,28,28,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,28,28,-61,-62,107,107,107,28,107,28,107,28,28,28,-30,]),'LBRACE':([6,9,15,16,17,18,19,55,91,121,],[10,20,-34,-35,-36,-37,-38,88,112,125,]),'EQUAL':([8,13,15,16,17,18,19,21,],[14,27,-34,-35,-36,-37,-38,46,]),'FLOAT64_TYPE':([8,56,78,114,118,],[15,15,15,15,15,]),'COMPLEX64_TYPE':([8,56,78,114,118,],[16,16,16,16,16,]),'INT_TYPE':([8,56,78,114,118,],[17,17,17,17,17,]),'BOOL_TYPE':([8,56,78,114,118,],[18,18,18,18,18,]),'STRING_TYPE':([8,56,78,114,118,],[19,19,19,19,19,]),'DOSPUNTOS':([9,28,30,31,32,33,34,35,36,37,38,39,40,48,51,52,54,81,82,94,95,96,98,107,116,120,126,129,130,],[21,-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,85,86,87,-64,102,-39,-52,-63,-51,-60,21,-40,-53,-26,132,-27,]),'CASE':([10,20,23,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,60,83,88,94,95,96,98,105,106,108,109,115,120,126,130,],[24,45,24,-48,-32,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,45,-64,-31,-33,45,-52,-63,-51,-60,-11,-12,-18,-19,-24,-53,-26,-27,]),'SEMICOLON':([11,28,30,31,32,33,34,35,36,37,38,39,40,54,83,94,95,96,98,120,126,130,],[25,-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-64,-33,-52,-63,-51,-60,-53,-26,-27,]),'LPAREN':([12,14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[26,41,41,41,41,41,41,41,41,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,41,41,-61,-62,41,41,41,41,41,-30,]),'FLOAT64':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[30,30,30,30,30,30,30,30,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,30,30,-61,-62,30,30,30,30,30,-30,]),'COMPLEX64':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[31,31,31,31,31,31,31,31,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,31,31,-61,-62,31,31,31,31,31,-30,]),'INT':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[32,32,32,32,32,32,32,32,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,32,32,-61,-62,32,32,32,32,32,-30,]),'BOOL':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[33,54,33,33,33,33,33,33,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,33,54,-61,-62,33,33,33,33,33,-30,]),'STRING':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[34,34,34,34,34,34,34,34,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,34,34,-61,-62,34,34,34,34,34,-30,]),'MAP':([14,24,27,41,45,46,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,99,103,125,128,132,134,],[42,42,42,42,42,42,42,42,-54,-55,-56,-57,-58,-65,-66,-67,-68,-69,42,42,-61,-62,42,42,42,42,42,-30,]),'COMMA':([15,16,17,18,19,28,30,31,32,33,34,35,36,37,38,39,40,54,58,59,82,89,94,95,96,98,120,123,126,130,133,],[-34,-35,-36,-37,-38,-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-64,92,93,103,-9,-52,-63,-51,-60,-53,-10,-26,-27,134,]),'RPAREN':([15,16,17,18,19,28,30,31,32,33,34,35,36,37,38,39,40,54,57,58,59,89,92,93,94,95,96,98,113,120,123,126,130,],[-34,-35,-36,-37,-38,-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-64,91,-5,-6,-9,-7,-8,-52,-63,-51,-60,120,-53,-10,-26,-27,]),'RBRACKET':([15,16,17,18,19,100,],[-34,-35,-36,-37,-38,114,]),'DEFAULT':([22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,50,54,60,80,83,94,95,96,98,105,106,108,109,110,115,120,126,130,],[48,-16,-48,-32,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,48,-22,-17,-64,-31,-23,-33,-52,-63,-51,-60,-11,-12,-18,-19,48,-24,-53,-26,-27,]),'RBRACE':([22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,47,49,50,54,60,79,80,83,94,95,96,98,104,105,106,108,109,110,115,117,119,120,125,126,127,128,130,131,134,],[-70,-16,-48,-32,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-70,-22,84,-21,-17,-64,-31,101,-23,-33,-52,-63,-51,-60,-20,-11,-12,-18,-19,-70,-24,122,124,-53,126,-26,130,-28,-27,-29,-30,]),'PLUS':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,63,-41,-42,-43,-44,-45,-46,-47,-49,63,-59,-25,-47,-48,63,-44,63,63,63,63,63,63,-46,63,-47,63,-53,-26,63,-27,63,]),'MINUS':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,64,-41,-42,-43,-44,-45,-46,-47,-49,64,-59,-25,-47,-48,64,-44,64,64,64,64,64,64,-46,64,-47,64,-53,-26,64,-27,64,]),'TIMES':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,65,-41,-42,-43,-44,-45,-46,-47,-49,65,-59,-25,-47,-48,65,-44,65,65,65,65,65,65,-46,65,-47,65,-53,-26,65,-27,65,]),'DIVIDE':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,66,-41,-42,-43,-44,-45,-46,-47,-49,66,-59,-25,-47,-48,66,-44,66,66,66,66,66,66,-46,66,-47,66,-53,-26,66,-27,66,]),'MOD':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,67,-41,-42,-43,-44,-45,-46,-47,-49,67,-59,-25,-47,-48,67,-44,67,67,67,67,67,67,-46,67,-47,67,-53,-26,67,-27,67,]),'NOT_EQUAL':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,68,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-47,-48,68,-44,68,68,68,68,68,68,-46,68,-47,68,-53,-26,68,-27,68,]),'LESS_THAN':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,69,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-47,-48,69,-44,69,69,69,69,69,69,-46,69,-47,69,-53,-26,69,-27,69,]),'LESS_EQUAL':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,70,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-47,-48,70,-44,70,70,70,70,70,70,-46,70,-47,70,-53,-26,70,-27,70,]),'GREATER_THAN':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,71,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-47,-48,71,-44,71,71,71,71,71,71,-46,71,-47,71,-53,-26,71,-27,71,]),'GREATER_EQUAL':([28,29,30,31,32,33,34,35,36,37,38,39,40,51,52,53,54,60,77,82,83,94,95,96,97,98,113,120,126,129,130,133,],[-48,72,-41,-42,-43,-44,-45,-46,-47,-49,-50,-59,-25,-47,-48,72,-44,72,72,72,72,72,72,-46,72,-47,72,-53,-26,72,-27,72,]),'AND':([28,30,31,32,33,34,35,36,37,38,39,40,54,94,95,96,98,120,126,130,],[-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,75,-25,-64,-52,-63,-51,-60,-53,-26,-27,]),'OR':([28,30,31,32,33,34,35,36,37,38,39,40,54,94,95,96,98,120,126,130,],[-48,-41,-42,-43,-44,-45,-46,-47,-49,-50,76,-25,-64,-52,-63,-51,-60,-53,-26,-27,]),'LBRACKET':([42,],[78,]),'PUNTO':([56,90,111,],[90,111,118,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'asignacion':([0,85,86,87,102,112,],[2,106,106,106,106,106,]),'sentenciaSwitch':([0,],[3,]),'funcion':([0,],[4,]),'asignacionCorta':([6,85,86,87,102,112,],[11,105,105,105,105,105,]),'tipoDato':([8,56,78,114,118,],[13,89,100,121,123,]),'bloqueCasosBooleanos':([10,23,],[22,50,]),'casoBooleano':([10,23,],[23,23,]),'valor':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[29,53,60,77,82,83,94,95,97,53,113,82,129,129,133,]),'expresionesAritmeticas':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[35,35,35,35,35,35,35,35,96,35,35,35,35,35,35,]),'condiciones':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[36,51,36,36,36,36,36,36,36,98,36,36,36,36,36,]),'estructurasDeDatos':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'expresionAritmetica':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'condicion':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'mapa':([14,24,27,41,45,46,61,62,73,74,99,103,125,128,132,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'bloqueCasosSwitch':([20,44,88,],[43,80,110,]),'casoSwitch':([20,44,88,],[44,44,44,]),'casoDefault':([22,43,110,],[47,79,117,]),'empty':([22,43,110,],[49,49,49,]),'argumentos':([26,],[57,]),'argumento':([26,],[58,]),'argumentoVariadico':([26,],[59,]),'operador':([29,38,53,60,77,82,83,94,95,97,113,129,133,],[61,73,61,61,99,61,61,61,61,61,61,61,61,]),'operadorComp':([29,53,60,77,82,83,94,95,97,113,129,133,],[62,62,62,62,62,62,62,62,62,62,62,62,]),'conector':([39,],[74,]),'valores':([45,103,],[81,116,]),'subcodigo':([85,86,87,102,112,],[104,108,109,115,119,]),'elementosMapa':([125,128,],[127,131,]),'elementoMapa':([125,128,],[128,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> asignacion','codigo',1,'p_codigo','parserGo.py',5),
  ('codigo -> sentenciaSwitch','codigo',1,'p_codigo','parserGo.py',6),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',7),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',11),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',14),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',15),
  ('argumentos -> argumento COMMA','argumentos',2,'p_argumentos','parserGo.py',16),
  ('argumentos -> argumentoVariadico COMMA','argumentos',2,'p_argumentos','parserGo.py',17),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',20),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',23),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',27),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',28),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',31),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',34),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',37),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',40),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',41),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',44),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',45),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',48),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',49),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',52),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',53),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',56),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',61),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',64),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',67),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',70),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',71),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',74),
  ('asignacion -> VAR ID tipoDato EQUAL valor','asignacion',5,'p_asignacionTipo','parserGo.py',78),
  ('asignacion -> VAR ID EQUAL valor','asignacion',4,'p_asignacionInferencia','parserGo.py',81),
  ('asignacionCorta -> ID DOSPUNTOS EQUAL valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',84),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',87),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',88),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',89),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',90),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',91),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',94),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',95),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',98),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',99),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',100),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',101),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',102),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',103),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',104),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',105),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',106),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',110),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',111),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',114),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',115),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',118),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',119),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',120),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',121),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',122),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',126),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',127),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',130),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',131),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',134),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',135),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',138),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',139),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',140),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',141),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',142),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',145),
]
