
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FMT FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS PRINT_LN PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : asignacion\n              | sentenciaSwitch\n              | funcion\n              | funcionSinArg\n              | funcionAnonima\n              | imprimir\n              | mapa\n              | arrayfuncion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA argumentos\n                  | argumentoVariadico COMMA argumentosargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato funcionSinArg : FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACEfuncionAnonima : FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPARENfuncionAnonima : FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPARENsubcodigo : asignacionCorta\n                  | asignacionsentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigoestructurasDeDatos : mapa\n                        | arraymapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE\n            | MAP LBRACKET tipoDato RBRACKET tipoDatomapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAarray : LBRACKET INT RBRACKET tipoDato\n            | LBRACKET INT RBRACKET tipoDato LBRACE RBRACEarray : LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACEelementosArray : valor\n                        | valor COMMA elementosArrayasignacion : VAR ID tipoDato ASSIGN valorasignacion : VAR ID ASSIGN valorasignacionCorta : ID DOSPUNTOS ASSIGN valortipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUAL\n                    | EQUALempty :imprimir : FMT PUNTO PRINT_LN LPAREN valores RPAREN\n                | FMT PUNTO PRINT_LN LPAREN RPAREN'
    
_lr_action_items = {'VAR':([0,78,112,113,114,117,122,137,143,],[10,10,10,10,10,10,10,10,10,]),'SWITCH':([0,],[11,]),'FUNC':([0,],[12,]),'FMT':([0,],[13,]),'MAP':([0,26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[14,14,14,14,14,14,14,14,14,14,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,14,14,-76,-77,14,14,14,14,14,14,14,-40,]),'LBRACKET':([0,14,26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[15,23,15,15,15,15,15,15,15,15,15,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,15,15,-76,-77,15,15,15,15,15,15,15,-40,]),'$end':([1,2,3,4,5,6,7,8,9,27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,74,86,87,111,127,128,130,131,132,134,136,148,150,158,162,166,168,169,170,171,173,177,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-49,-50,-51,-52,-53,-63,-47,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-79,-41,-46,-23,-88,-36,-67,-78,-66,-75,-21,-87,-42,-16,-35,-43,-68,-22,-9,-17,-37,-18,]),'ID':([10,11,12,21,26,36,37,38,47,62,65,66,78,80,81,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,117,122,129,135,137,138,143,149,164,167,175,179,],[16,17,20,43,48,72,75,43,48,48,48,48,121,43,43,48,48,48,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,48,48,-76,-77,121,121,121,121,121,48,48,121,48,121,48,48,48,48,-40,]),'LBRACE':([11,17,27,28,29,30,31,39,75,77,79,86,116,128,],[18,32,-49,-50,-51,-52,-53,78,115,117,122,129,143,149,]),'LPAREN':([12,20,26,36,44,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,145,149,160,164,167,175,179,],[21,38,62,62,84,62,62,62,62,62,62,62,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,62,62,-76,-77,62,62,62,159,62,172,62,62,62,-40,]),'PUNTO':([13,43,83,125,],[22,83,125,147,]),'INT':([15,26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[24,52,52,52,52,52,52,52,52,52,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,52,52,-76,-77,52,52,52,52,52,52,52,-40,]),'ASSIGN':([16,25,27,28,29,30,31,33,],[26,47,-49,-50,-51,-52,-53,66,]),'FLOAT64_TYPE':([16,23,43,46,85,147,],[27,27,27,27,27,27,]),'COMPLEX64_TYPE':([16,23,43,46,85,147,],[28,28,28,28,28,28,]),'INT_TYPE':([16,23,43,46,85,147,],[29,29,29,29,29,29,]),'BOOL_TYPE':([16,23,43,46,85,147,],[30,30,30,30,30,30,]),'STRING_TYPE':([16,23,43,46,85,147,],[31,31,31,31,31,31,]),'DOSPUNTOS':([17,27,28,29,30,31,48,50,51,52,53,54,55,56,57,58,59,60,61,68,71,72,74,86,108,109,121,128,130,131,132,134,150,155,162,165,166,168,173,],[33,-49,-50,-51,-52,-53,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,112,113,114,-79,-41,137,-54,33,-36,-67,-78,-66,-75,-42,-55,-35,175,-43,-68,-37,]),'CASE':([18,27,28,29,30,31,32,35,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,74,86,87,110,115,119,120,128,130,131,132,134,140,141,150,154,162,166,168,173,],[36,-49,-50,-51,-52,-53,65,36,-63,-47,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,65,-79,-41,-46,-48,65,-19,-20,-36,-67,-78,-66,-75,-26,-27,-42,-32,-35,-43,-68,-37,]),'SEMICOLON':([19,27,28,29,30,31,48,50,51,52,53,54,55,56,57,58,59,60,61,74,86,110,128,130,131,132,134,150,162,166,168,173,],[37,-49,-50,-51,-52,-53,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-79,-41,-48,-36,-67,-78,-66,-75,-42,-35,-43,-68,-37,]),'RPAREN':([21,27,28,29,30,31,38,40,41,42,48,50,51,52,53,54,55,56,57,58,59,60,61,74,76,82,84,86,109,123,124,126,128,130,131,132,134,150,153,155,159,161,162,166,168,172,173,],[39,-49,-50,-51,-52,-53,77,79,-10,-11,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-79,116,-14,127,-41,-54,-12,-13,148,-36,-67,-78,-66,-75,-42,168,-55,171,-15,-35,-43,-68,177,-37,]),'PRINT_LN':([22,],[44,]),'RBRACKET':([24,27,28,29,30,31,45,],[46,-49,-50,-51,-52,-53,85,]),'FLOAT64':([26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[50,50,50,50,50,50,50,50,50,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,50,50,-76,-77,50,50,50,50,50,50,50,-40,]),'COMPLEX64':([26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[51,51,51,51,51,51,51,51,51,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,51,51,-76,-77,51,51,51,51,51,51,51,-40,]),'BOOL':([26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[53,74,53,53,53,53,53,53,53,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,53,74,-76,-77,53,53,53,53,53,53,53,-40,]),'STRING':([26,36,47,62,65,66,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,129,135,138,149,164,167,175,179,],[54,54,54,54,54,54,54,54,54,-69,-70,-71,-72,-73,-80,-81,-82,-83,-84,-85,54,54,-76,-77,54,54,54,54,54,54,54,-40,]),'COMMA':([27,28,29,30,31,41,42,48,50,51,52,53,54,55,56,57,58,59,60,61,74,82,86,109,128,130,131,132,134,150,152,161,162,166,168,173,178,],[-49,-50,-51,-52,-53,80,81,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-79,-14,-41,138,-36,-67,-78,-66,-75,-42,167,-15,-35,-43,-68,-37,179,]),'PLUS':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,90,-56,-57,-58,-59,-60,-61,-62,-64,90,-74,-33,-34,-62,-63,90,-59,-41,90,90,90,90,-36,90,90,-61,90,-62,-42,90,90,-35,90,-43,-68,-37,90,]),'MINUS':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,91,-56,-57,-58,-59,-60,-61,-62,-64,91,-74,-33,-34,-62,-63,91,-59,-41,91,91,91,91,-36,91,91,-61,91,-62,-42,91,91,-35,91,-43,-68,-37,91,]),'TIMES':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,92,-56,-57,-58,-59,-60,-61,-62,-64,92,-74,-33,-34,-62,-63,92,-59,-41,92,92,92,92,-36,92,92,-61,92,-62,-42,92,92,-35,92,-43,-68,-37,92,]),'DIVIDE':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,93,-56,-57,-58,-59,-60,-61,-62,-64,93,-74,-33,-34,-62,-63,93,-59,-41,93,93,93,93,-36,93,93,-61,93,-62,-42,93,93,-35,93,-43,-68,-37,93,]),'MOD':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,94,-56,-57,-58,-59,-60,-61,-62,-64,94,-74,-33,-34,-62,-63,94,-59,-41,94,94,94,94,-36,94,94,-61,94,-62,-42,94,94,-35,94,-43,-68,-37,94,]),'NOT_EQUAL':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,95,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,95,-59,-41,95,95,95,95,-36,95,95,-61,95,-62,-42,95,95,-35,95,-43,-68,-37,95,]),'LESS_THAN':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,96,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,96,-59,-41,96,96,96,96,-36,96,96,-61,96,-62,-42,96,96,-35,96,-43,-68,-37,96,]),'LESS_EQUAL':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,97,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,97,-59,-41,97,97,97,97,-36,97,97,-61,97,-62,-42,97,97,-35,97,-43,-68,-37,97,]),'GREATER_THAN':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,98,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,98,-59,-41,98,98,98,98,-36,98,98,-61,98,-62,-42,98,98,-35,98,-43,-68,-37,98,]),'GREATER_EQUAL':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,99,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,99,-59,-41,99,99,99,99,-36,99,99,-61,99,-62,-42,99,99,-35,99,-43,-68,-37,99,]),'EQUAL':([27,28,29,30,31,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,73,74,86,87,105,109,110,128,130,131,132,133,134,150,152,153,162,165,166,168,173,178,],[-49,-50,-51,-52,-53,-63,100,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-62,-63,100,-59,-41,100,100,100,100,-36,100,100,-61,100,-62,-42,100,100,-35,100,-43,-68,-37,100,]),'RBRACE':([27,28,29,30,31,34,35,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,67,69,70,74,86,87,106,107,110,118,119,120,128,129,130,131,132,134,139,140,141,142,144,146,149,150,151,152,154,156,157,162,163,164,166,168,173,174,176,179,],[-49,-50,-51,-52,-53,-86,-24,-63,-47,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,-86,-30,111,-29,-25,-79,-41,-46,136,-31,-48,145,-19,-20,-36,150,-67,-78,-66,-75,-28,-26,-27,-86,158,160,162,-42,166,-44,-32,169,170,-35,173,-38,-43,-68,-37,-39,-45,-40,]),'DEFAULT':([27,28,29,30,31,34,35,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,70,74,86,87,107,110,119,120,128,130,131,132,134,140,141,142,150,154,162,166,168,173,],[-49,-50,-51,-52,-53,68,-24,-63,-47,-56,-57,-58,-59,-60,-61,-62,-64,-65,-74,-33,-34,68,-30,-25,-79,-41,-46,-31,-48,-19,-20,-36,-67,-78,-66,-75,-26,-27,68,-42,-32,-35,-43,-68,-37,]),'AND':([27,28,29,30,31,48,50,51,52,53,54,55,56,57,58,59,60,61,74,86,128,130,131,132,134,150,162,166,168,173,],[-49,-50,-51,-52,-53,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,103,-33,-34,-79,-41,-36,-67,-78,-66,-75,-42,-35,-43,-68,-37,]),'OR':([27,28,29,30,31,48,50,51,52,53,54,55,56,57,58,59,60,61,74,86,128,130,131,132,134,150,162,166,168,173,],[-49,-50,-51,-52,-53,-63,-56,-57,-58,-59,-60,-61,-62,-64,-65,104,-33,-34,-79,-41,-36,-67,-78,-66,-75,-42,-35,-43,-68,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'asignacion':([0,78,112,113,114,117,122,137,143,],[2,120,120,120,120,120,120,120,120,]),'sentenciaSwitch':([0,],[3,]),'funcion':([0,],[4,]),'funcionSinArg':([0,],[5,]),'funcionAnonima':([0,],[6,]),'imprimir':([0,],[7,]),'mapa':([0,26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[8,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'array':([0,26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[9,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'asignacionCorta':([11,78,112,113,114,117,122,137,143,],[19,119,119,119,119,119,119,119,119,]),'tipoDato':([16,23,43,46,85,147,],[25,45,82,86,128,161,]),'bloqueCasosBooleanos':([18,35,],[34,70,]),'casoBooleano':([18,35,],[35,35,]),'argumentos':([21,38,80,81,],[40,76,123,124,]),'argumento':([21,38,80,81,],[41,41,41,41,]),'argumentoVariadico':([21,38,80,81,],[42,42,42,42,]),'valor':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[49,73,87,105,109,110,109,130,131,133,73,152,153,109,165,165,152,178,]),'expresionesAritmeticas':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[55,55,55,55,55,55,55,55,55,132,55,55,55,55,55,55,55,55,]),'condiciones':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[56,71,56,56,56,56,56,56,56,56,134,56,56,56,56,56,56,56,]),'estructurasDeDatos':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'expresionAritmetica':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'condicion':([26,36,47,62,65,66,84,88,89,101,102,129,135,138,149,164,167,175,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'bloqueCasosSwitch':([32,64,115,],[63,107,142,]),'casoSwitch':([32,64,115,],[64,64,64,]),'casoDefault':([34,63,142,],[67,106,156,]),'empty':([34,63,142,],[69,69,69,]),'operador':([49,58,73,87,105,109,110,130,131,133,152,153,165,178,],[88,101,88,88,135,88,88,88,88,88,88,88,88,88,]),'operadorComp':([49,73,87,105,109,110,130,131,133,152,153,165,178,],[89,89,89,89,89,89,89,89,89,89,89,89,89,]),'conector':([59,],[102,]),'valores':([65,84,138,],[108,126,155,]),'subcodigo':([78,112,113,114,117,122,137,143,],[118,139,140,141,144,146,154,157,]),'elementosArray':([129,167,],[151,176,]),'elementosMapa':([149,164,],[163,174,]),'elementoMapa':([149,164,],[164,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> asignacion','codigo',1,'p_codigo','parserGo.py',6),
  ('codigo -> sentenciaSwitch','codigo',1,'p_codigo','parserGo.py',7),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',8),
  ('codigo -> funcionSinArg','codigo',1,'p_codigo','parserGo.py',9),
  ('codigo -> funcionAnonima','codigo',1,'p_codigo','parserGo.py',10),
  ('codigo -> imprimir','codigo',1,'p_codigo','parserGo.py',11),
  ('codigo -> mapa','codigo',1,'p_codigo','parserGo.py',12),
  ('codigo -> array','codigo',1,'p_codigo','parserGo.py',13),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',17),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',20),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',21),
  ('argumentos -> argumento COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',22),
  ('argumentos -> argumentoVariadico COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',23),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',26),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',29),
  ('funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE','funcionSinArg',7,'p_funcionSinArg','parserGo.py',33),
  ('funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',8,'p_funcion_anonima','parserGo.py',36),
  ('funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',9,'p_funcion_anonima_variadico','parserGo.py',39),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',43),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',44),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',47),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',50),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',53),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',56),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',57),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',60),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',61),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',64),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',65),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',68),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',69),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',72),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',77),
  ('estructurasDeDatos -> array','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',78),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',81),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato','mapa',5,'p_definicionMapaVacio','parserGo.py',82),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',85),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',88),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',89),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',92),
  ('array -> LBRACKET INT RBRACKET tipoDato','array',4,'p_arrayVacio','parserGo.py',96),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE','array',6,'p_arrayVacio','parserGo.py',97),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE','array',7,'p_arrayConElementos','parserGo.py',100),
  ('elementosArray -> valor','elementosArray',1,'p_elementosArray','parserGo.py',103),
  ('elementosArray -> valor COMMA elementosArray','elementosArray',3,'p_elementosArray','parserGo.py',104),
  ('asignacion -> VAR ID tipoDato ASSIGN valor','asignacion',5,'p_asignacionTipo','parserGo.py',108),
  ('asignacion -> VAR ID ASSIGN valor','asignacion',4,'p_asignacionInferencia','parserGo.py',111),
  ('asignacionCorta -> ID DOSPUNTOS ASSIGN valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',114),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',117),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',118),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',119),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',120),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',121),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',124),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',125),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',128),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',129),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',130),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',131),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',132),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',133),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',134),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',135),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',136),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',140),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',141),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',144),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',145),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',148),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',149),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',150),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',151),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',152),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',156),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',157),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',160),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',161),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',164),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',165),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',168),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',169),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',170),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',171),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',172),
  ('operadorComp -> EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',173),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',176),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN','imprimir',6,'p_imprimir','parserGo.py',181),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN','imprimir',5,'p_imprimir','parserGo.py',182),
]
