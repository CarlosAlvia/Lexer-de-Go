
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FMT FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS POINTER PRINT_LN PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : asignacion\n              | sentenciaSwitch\n              | funcion\n              | funcionSinArg\n              | funcionAnonima\n              | imprimir\n              | mapa\n              | array\n              | solicitudDatos\n              | sentenciaIffuncion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA argumentos\n                  | argumentoVariadico COMMA argumentosargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato funcionSinArg : FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACEfuncionAnonima : FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPARENfuncionAnonima : FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPARENsubcodigo : asignacionCorta\n                  | asignacion\n                  | imprimirsentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigosentenciaIf : IF condiciones LBRACE RBRACE\n                    | IF condiciones LBRACE subcodigo RBRACE \n                    | IF asignacionCorta SEMICOLON condiciones LBRACE subcodigo RBRACEestructurasDeDatos : mapa\n                        | arraymapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE\n            | MAP LBRACKET tipoDato RBRACKET tipoDatomapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAarray : LBRACKET INT RBRACKET tipoDato\n            | LBRACKET INT RBRACKET tipoDato LBRACE RBRACEarray : LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACEelementosArray : valor\n                        | valor COMMA elementosArrayasignacion : VAR ID tipoDato ASSIGN valorasignacion : VAR ID ASSIGN valorasignacionCorta : ID DOSPUNTOS ASSIGN valortipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUAL\n                    | EQUALempty :imprimir : FMT PUNTO PRINT_LN LPAREN valores RPAREN\n                | FMT PUNTO PRINT_LN LPAREN RPARENsolicitudDatos : FMT PUNTO SCANLN LPAREN POINTER ID RPAREN'
    
_lr_action_items = {'VAR':([0,67,105,136,137,138,141,143,154,157,163,],[12,12,12,12,12,12,12,12,12,12,12,]),'SWITCH':([0,],[13,]),'FUNC':([0,],[14,]),'FMT':([0,67,105,136,137,138,141,143,154,157,163,],[15,121,121,121,121,121,121,121,121,121,121,]),'MAP':([0,18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[16,16,16,16,16,16,16,-82,-83,16,16,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,16,16,16,16,16,16,16,16,16,16,16,16,-46,]),'LBRACKET':([0,16,18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[17,26,17,17,17,17,17,17,-82,-83,17,17,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,17,17,17,17,17,17,17,17,17,17,17,17,-46,]),'IF':([0,],[18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,87,88,89,91,114,115,123,124,125,126,129,135,148,150,152,156,168,171,175,180,184,185,189,191,192,193,194,196,200,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-65,-68,-69,-53,-47,-36,-81,-84,-73,-72,-52,-26,-94,-42,-37,-24,-93,-48,-74,-18,-95,-41,-49,-38,-25,-11,-19,-43,-20,]),'ID':([12,13,14,18,24,43,45,55,56,57,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,105,107,108,111,128,136,137,138,141,143,149,151,154,157,158,163,170,187,190,198,202,],[19,20,23,31,62,89,89,101,102,62,120,89,89,-82,-83,89,89,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,89,89,89,89,120,62,62,89,89,120,120,120,120,120,169,89,120,120,89,120,89,89,89,89,-46,]),'LBRACE':([13,20,28,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,58,87,88,89,102,104,106,114,122,123,124,125,126,140,150,171,175,185,189,196,],[21,51,67,-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,105,-65,-68,-69,139,141,143,151,154,-81,-84,-73,-72,163,170,-48,-74,-41,-49,-43,]),'LPAREN':([14,18,23,43,45,55,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,165,170,182,187,190,198,202,],[24,43,57,43,43,43,111,112,43,43,-82,-83,43,43,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,43,43,43,43,43,43,43,43,181,43,195,43,43,43,-46,]),'PUNTO':([15,62,110,121,146,],[25,110,146,153,167,]),'INT':([17,18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[27,36,36,36,36,36,36,-82,-83,36,36,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,36,36,36,36,36,36,36,36,36,36,36,36,-46,]),'BOOL':([18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[33,87,87,33,33,33,-82,-83,87,87,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,87,87,87,87,87,87,87,87,87,87,87,87,-46,]),'FLOAT64':([18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[34,34,34,34,34,34,-82,-83,34,34,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,34,34,34,34,34,34,34,34,34,34,34,34,-46,]),'COMPLEX64':([18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[35,35,35,35,35,35,-82,-83,35,35,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,35,35,35,35,35,35,35,35,35,35,35,35,-46,]),'STRING':([18,43,45,55,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,95,111,128,151,158,170,187,190,198,202,],[37,37,37,37,37,37,-82,-83,37,37,-86,-87,-88,-89,-90,-91,-75,-76,-77,-78,-79,37,37,37,37,37,37,37,37,37,37,37,37,-46,]),'ASSIGN':([19,44,46,47,48,49,50,52,],[45,90,-55,-56,-57,-58,-59,95,]),'FLOAT64_TYPE':([19,26,62,66,113,167,],[46,46,46,46,46,46,]),'COMPLEX64_TYPE':([19,26,62,66,113,167,],[47,47,47,47,47,47,]),'INT_TYPE':([19,26,62,66,113,167,],[48,48,48,48,48,48,]),'BOOL_TYPE':([19,26,62,66,113,167,],[49,49,49,49,49,49,]),'STRING_TYPE':([19,26,62,66,113,167,],[50,50,50,50,50,50,]),'DOSPUNTOS':([20,30,31,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,87,88,89,97,100,101,114,120,123,124,125,126,132,133,150,171,175,177,185,188,189,196,],[52,-80,52,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-65,-68,-69,136,137,138,-47,52,-81,-84,-73,-72,157,-60,-42,-48,-74,-61,-41,198,-49,-43,]),'CASE':([21,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,54,87,88,89,91,93,114,117,118,119,123,124,125,126,129,134,139,148,150,160,161,168,171,175,176,185,189,196,],[55,-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,94,55,-65,-68,-69,-53,94,-47,-21,-22,-23,-81,-84,-73,-72,-52,-54,94,-94,-42,-29,-30,-93,-48,-74,-35,-41,-49,-43,]),'SEMICOLON':([22,29,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,87,88,89,114,123,124,125,126,134,150,171,175,185,189,196,],[56,68,-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-65,-68,-69,-47,-81,-84,-73,-72,-54,-42,-48,-74,-41,-49,-43,]),'RPAREN':([24,30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,57,59,60,61,87,88,89,103,109,111,114,123,124,125,126,133,144,145,147,150,155,169,171,175,177,181,183,185,189,195,196,],[58,-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,104,106,-12,-13,-65,-68,-69,140,-16,148,-47,-81,-84,-73,-72,-60,-14,-15,168,-42,175,184,-48,-74,-61,194,-17,-41,-49,200,-43,]),'PRINT_LN':([25,153,],[63,63,]),'SCANLN':([25,],[64,]),'RBRACKET':([27,46,47,48,49,50,65,],[66,-55,-56,-57,-58,-59,113,]),'NOT_EQUAL':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,74,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,74,-65,-68,-69,74,-68,-69,-47,-68,-68,74,74,-67,74,74,74,74,-42,74,-48,74,-74,-41,74,-49,-43,74,]),'LESS_THAN':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,75,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,75,-65,-68,-69,75,-68,-69,-47,-68,-68,75,75,-67,75,75,75,75,-42,75,-48,75,-74,-41,75,-49,-43,75,]),'LESS_EQUAL':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,76,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,76,-65,-68,-69,76,-68,-69,-47,-68,-68,76,76,-67,76,76,76,76,-42,76,-48,76,-74,-41,76,-49,-43,76,]),'GREATER_THAN':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,77,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,77,-65,-68,-69,77,-68,-69,-47,-68,-68,77,77,-67,77,77,77,77,-42,77,-48,77,-74,-41,77,-49,-43,77,]),'GREATER_EQUAL':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,78,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,78,-65,-68,-69,78,-68,-69,-47,-68,-68,78,78,-67,78,78,78,78,-42,78,-48,78,-74,-41,78,-49,-43,78,]),'EQUAL':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,79,-65,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,79,-65,-68,-69,79,-68,-69,-47,-68,-68,79,79,-67,79,79,79,79,-42,79,-48,79,-74,-41,79,-49,-43,79,]),'PLUS':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,80,-65,-62,-63,-64,-66,-67,-70,80,-39,-40,-55,-56,-57,-58,-59,80,-65,-68,-69,80,-68,-69,-47,-68,-68,80,80,-67,80,80,80,80,-42,80,-48,80,-74,-41,80,-49,-43,80,]),'MINUS':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,81,-65,-62,-63,-64,-66,-67,-70,81,-39,-40,-55,-56,-57,-58,-59,81,-65,-68,-69,81,-68,-69,-47,-68,-68,81,81,-67,81,81,81,81,-42,81,-48,81,-74,-41,81,-49,-43,81,]),'TIMES':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,82,-65,-62,-63,-64,-66,-67,-70,82,-39,-40,-55,-56,-57,-58,-59,82,-65,-68,-69,82,-68,-69,-47,-68,-68,82,82,-67,82,82,82,82,-42,82,-48,82,-74,-41,82,-49,-43,82,]),'DIVIDE':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,83,-65,-62,-63,-64,-66,-67,-70,83,-39,-40,-55,-56,-57,-58,-59,83,-65,-68,-69,83,-68,-69,-47,-68,-68,83,83,-67,83,83,83,83,-42,83,-48,83,-74,-41,83,-49,-43,83,]),'MOD':([28,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,86,87,88,89,91,100,101,114,122,123,124,125,126,127,129,133,134,150,155,171,173,175,185,188,189,196,201,],[-68,-80,-69,84,-65,-62,-63,-64,-66,-67,-70,84,-39,-40,-55,-56,-57,-58,-59,84,-65,-68,-69,84,-68,-69,-47,-68,-68,84,84,-67,84,84,84,84,-42,84,-48,84,-74,-41,84,-49,-43,84,]),'RBRACE':([30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,53,54,67,87,88,89,91,92,93,96,98,99,114,116,117,118,119,123,124,125,126,129,130,131,134,142,148,150,151,159,160,161,162,164,166,168,170,171,172,173,174,175,176,178,179,185,186,187,189,196,197,199,202,],[-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-92,-27,115,-65,-68,-69,-53,-92,-33,135,-32,-28,-47,152,-21,-22,-23,-81,-84,-73,-72,-52,156,-34,-54,165,-94,-42,171,-31,-29,-30,-92,180,182,-93,185,-48,189,-50,191,-74,-35,192,193,-41,196,-44,-49,-43,-45,-51,-46,]),'DEFAULT':([30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,53,54,87,88,89,91,92,93,99,114,117,118,119,123,124,125,126,129,131,134,148,150,160,161,162,168,171,175,176,185,189,196,],[-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,97,-27,-65,-68,-69,-53,97,-33,-28,-47,-21,-22,-23,-81,-84,-73,-72,-52,-34,-54,-94,-42,-29,-30,97,-93,-48,-74,-35,-41,-49,-43,]),'AND':([30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,87,88,89,114,123,124,125,126,150,171,175,185,189,196,],[70,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-65,-68,-69,-47,-81,-84,-73,-72,-42,-48,-74,-41,-49,-43,]),'OR':([30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,87,88,89,114,123,124,125,126,150,171,175,185,189,196,],[71,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,-65,-68,-69,-47,-81,-84,-73,-72,-42,-48,-74,-41,-49,-43,]),'COMMA':([30,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,60,61,87,88,89,109,114,123,124,125,126,133,150,171,173,175,183,185,189,196,201,],[-80,-85,-62,-63,-64,-66,-67,-70,-71,-39,-40,-55,-56,-57,-58,-59,107,108,-65,-68,-69,-16,-47,-81,-84,-73,-72,158,-42,-48,190,-74,-17,-41,-49,-43,202,]),'POINTER':([112,],[149,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'asignacion':([0,67,105,136,137,138,141,143,154,157,163,],[2,118,118,118,118,118,118,118,118,118,118,]),'sentenciaSwitch':([0,],[3,]),'funcion':([0,],[4,]),'funcionSinArg':([0,],[5,]),'funcionAnonima':([0,],[6,]),'imprimir':([0,67,105,136,137,138,141,143,154,157,163,],[7,119,119,119,119,119,119,119,119,119,119,]),'mapa':([0,18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[8,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'array':([0,18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[9,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'solicitudDatos':([0,],[10,]),'sentenciaIf':([0,],[11,]),'asignacionCorta':([13,18,67,105,136,137,138,141,143,154,157,163,],[22,29,117,117,117,117,117,117,117,117,117,117,]),'condiciones':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[28,88,88,100,122,123,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'condicion':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'valor':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[32,86,91,32,32,32,124,125,127,129,133,134,133,155,173,133,188,188,173,201,]),'expresionesAritmeticas':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[38,38,38,38,38,38,38,38,126,38,38,38,38,38,38,38,38,38,38,38,]),'estructurasDeDatos':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'expresionAritmetica':([18,43,45,55,68,69,72,73,85,90,94,95,111,128,151,158,170,187,190,198,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'tipoDato':([19,26,62,66,113,167,],[44,65,109,114,150,183,]),'bloqueCasosBooleanos':([21,54,],[53,99,]),'casoBooleano':([21,54,],[54,54,]),'argumentos':([24,57,107,108,],[59,103,144,145,]),'argumento':([24,57,107,108,],[60,60,60,60,]),'argumentoVariadico':([24,57,107,108,],[61,61,61,61,]),'conector':([30,],[69,]),'operadorComp':([32,86,91,124,125,127,129,133,134,155,173,188,201,],[72,72,72,72,72,72,72,72,72,72,72,72,72,]),'operador':([32,40,86,91,124,125,127,129,133,134,155,173,188,201,],[73,85,128,73,73,73,73,73,73,73,73,73,73,73,]),'bloqueCasosSwitch':([51,93,139,],[92,131,162,]),'casoSwitch':([51,93,139,],[93,93,93,]),'casoDefault':([53,92,162,],[96,130,178,]),'empty':([53,92,162,],[98,98,98,]),'subcodigo':([67,105,136,137,138,141,143,154,157,163,],[116,142,159,160,161,164,166,174,176,179,]),'valores':([94,111,158,],[132,147,177,]),'elementosArray':([151,190,],[172,199,]),'elementosMapa':([170,187,],[186,197,]),'elementoMapa':([170,187,],[187,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> asignacion','codigo',1,'p_codigo','parserGo.py',6),
  ('codigo -> sentenciaSwitch','codigo',1,'p_codigo','parserGo.py',7),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',8),
  ('codigo -> funcionSinArg','codigo',1,'p_codigo','parserGo.py',9),
  ('codigo -> funcionAnonima','codigo',1,'p_codigo','parserGo.py',10),
  ('codigo -> imprimir','codigo',1,'p_codigo','parserGo.py',11),
  ('codigo -> mapa','codigo',1,'p_codigo','parserGo.py',12),
  ('codigo -> array','codigo',1,'p_codigo','parserGo.py',13),
  ('codigo -> solicitudDatos','codigo',1,'p_codigo','parserGo.py',14),
  ('codigo -> sentenciaIf','codigo',1,'p_codigo','parserGo.py',15),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',19),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',22),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',23),
  ('argumentos -> argumento COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',24),
  ('argumentos -> argumentoVariadico COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',25),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',28),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',31),
  ('funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE','funcionSinArg',7,'p_funcionSinArg','parserGo.py',35),
  ('funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',8,'p_funcion_anonima','parserGo.py',38),
  ('funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',9,'p_funcion_anonima_variadico','parserGo.py',41),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',45),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',46),
  ('subcodigo -> imprimir','subcodigo',1,'p_subcodigo','parserGo.py',47),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',50),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',53),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',56),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',59),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',60),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',63),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',64),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',67),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',68),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',71),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',72),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',75),
  ('sentenciaIf -> IF condiciones LBRACE RBRACE','sentenciaIf',4,'p_sentenciaIfClasica','parserGo.py',79),
  ('sentenciaIf -> IF condiciones LBRACE subcodigo RBRACE','sentenciaIf',5,'p_sentenciaIfClasica','parserGo.py',80),
  ('sentenciaIf -> IF asignacionCorta SEMICOLON condiciones LBRACE subcodigo RBRACE','sentenciaIf',7,'p_sentenciaIfClasica','parserGo.py',81),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',86),
  ('estructurasDeDatos -> array','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',87),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',90),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato','mapa',5,'p_definicionMapaVacio','parserGo.py',91),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',94),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',97),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',98),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',101),
  ('array -> LBRACKET INT RBRACKET tipoDato','array',4,'p_arrayVacio','parserGo.py',105),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE','array',6,'p_arrayVacio','parserGo.py',106),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE','array',7,'p_arrayConElementos','parserGo.py',109),
  ('elementosArray -> valor','elementosArray',1,'p_elementosArray','parserGo.py',112),
  ('elementosArray -> valor COMMA elementosArray','elementosArray',3,'p_elementosArray','parserGo.py',113),
  ('asignacion -> VAR ID tipoDato ASSIGN valor','asignacion',5,'p_asignacionTipo','parserGo.py',117),
  ('asignacion -> VAR ID ASSIGN valor','asignacion',4,'p_asignacionInferencia','parserGo.py',120),
  ('asignacionCorta -> ID DOSPUNTOS ASSIGN valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',123),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',126),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',127),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',128),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',129),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',130),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',133),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',134),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',137),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',138),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',139),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',140),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',141),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',142),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',143),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',144),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',145),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',149),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',150),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',153),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',154),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',157),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',158),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',159),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',160),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',161),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',165),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',166),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',169),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',170),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',173),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',174),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',177),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',178),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',179),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',180),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',181),
  ('operadorComp -> EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',182),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',185),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN','imprimir',6,'p_imprimir','parserGo.py',190),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN','imprimir',5,'p_imprimir','parserGo.py',191),
  ('solicitudDatos -> FMT PUNTO SCANLN LPAREN POINTER ID RPAREN','solicitudDatos',7,'p_solicitud_datos','parserGo.py',195),
]
