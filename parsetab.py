
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BOOL_TYPE BREAK CASE CHAN COMMA COMMENT COMPLEX64 COMPLEX64_TYPE CONST CONTINUE DEFAULT DEFER DIVIDE DOSPUNTOS ELSE EQUAL FALLTHROUGH FLOAT64 FLOAT64_TYPE FMT FOR FUNC GO GOTO GREATER_EQUAL GREATER_THAN ID IF ILLEGAL IMPORT INT INTERFACE INT_TYPE LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MAP MINUS MOD NOT NOT_EQUAL OR PACKAGE PLUS POINTER PRINT_LN PUNTO RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SELECT SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TYPE VARcodigo : asignacion\n              | sentenciaSwitch\n              | funcion\n              | funcionSinArg\n              | funcionAnonima\n              | imprimir\n              | mapa\n              | array\n              | solicitudDatos\n              | slice\n              | for\n              | expresionAritmetica\n              funcion : FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACEargumentos : argumento\n                  | argumentoVariadico\n                  | argumento COMMA argumentos\n                  | argumentoVariadico COMMA argumentosargumento : ID tipoDato argumentoVariadico : ID PUNTO PUNTO PUNTO tipoDato funcionSinArg : FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACEfuncionAnonima : FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPARENfuncionAnonima : FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPARENsubcodigo : asignacionCorta\n                  | asignacion\n                  | imprimir\n                  | solicitudDatos\n                  sentenciaSwitch : SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACEsentenciaSwitch : SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACEbloqueCasosBooleanos : casoBooleano\n                            | casoBooleano bloqueCasosBooleanoscasoBooleano : CASE condiciones DOSPUNTOS subcodigo\n                      | CASE ID DOSPUNTOS subcodigocasoDefault : DEFAULT DOSPUNTOS subcodigo\n                   | emptybloqueCasosSwitch : casoSwitch\n                         | casoSwitch bloqueCasosSwitchcasoSwitch : CASE valores DOSPUNTOS subcodigofor : FOR asignacionCorta SEMICOLON condiciones SEMICOLON autooperacion LBRACE subcodigo RBRACEfor : FOR condiciones LBRACE subcodigo RBRACEfor : FOR LBRACE subcodigo RBRACEestructurasDeDatos : mapa\n                        | array\n                        | slice\n                        mapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE\n            | MAP LBRACKET tipoDato RBRACKET tipoDatomapa : MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACEelementosMapa : elementoMapa\n                     | elementoMapa elementosMapaelementoMapa : valor DOSPUNTOS valor COMMAarray : LBRACKET INT RBRACKET tipoDato\n            | LBRACKET INT RBRACKET tipoDato LBRACE RBRACEarray : LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACEelementosArray : valor\n                        | valor COMMA elementosArrayslice : ID LBRACKET valor DOSPUNTOS valor RBRACKET slice : LBRACKET RBRACKET tipoDato LBRACE valores RBRACEasignacion : VAR ID tipoDato ASSIGN valorasignacion : VAR ID ASSIGN valorasignacionCorta : ID DOSPUNTOS ASSIGN valorautoincremento : ID PLUS PLUSautodecremento : ID MINUS MINUSautooperacion : autoincremento\n                        | autodecremento\n                        tipoDato : FLOAT64_TYPE\n                  | COMPLEX64_TYPE\n                  | INT_TYPE\n                  | BOOL_TYPE\n                  | STRING_TYPEvalores : valor\n               | valor COMMA valoresvalor : FLOAT64\n             | COMPLEX64\n             | INT\n             | BOOL\n             | STRING\n             | expresionesAritmeticas\n             | condiciones\n             | ID\n             | estructurasDeDatosexpresionesAritmeticas : expresionAritmetica\n                              | expresionAritmetica operador expresionesAritmeticasexpresionAritmetica : valor operador valor\n                             | LPAREN valor operador valor RPARENoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODcondiciones : condicion\n                   | condicion conector condicionesconector : AND\n                | ORcondicion : valor operadorComp valor\n                 | BOOLoperadorComp : NOT_EQUAL\n                    | LESS_THAN\n                    | LESS_EQUAL\n                    | GREATER_THAN\n                    | GREATER_EQUAL\n                    | EQUALempty :imprimir : FMT PUNTO PRINT_LN LPAREN valores RPAREN\n                | FMT PUNTO PRINT_LN LPAREN RPARENsolicitudDatos : FMT PUNTO SCANLN LPAREN POINTER ID RPAREN'
    
_lr_action_items = {'VAR':([0,66,103,127,150,151,152,155,157,172,178,209,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'SWITCH':([0,],[17,]),'FUNC':([0,],[18,]),'FMT':([0,66,103,127,150,151,152,155,157,172,178,209,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'MAP':([0,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[21,21,21,21,-85,-86,-87,-88,-89,21,21,21,-96,-97,-98,-99,-100,-101,21,-92,-93,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-50,]),'LBRACKET':([0,15,19,21,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,55,67,70,71,72,75,88,96,102,111,113,116,117,123,134,138,166,173,185,205,208,218,226,],[22,40,22,61,22,22,-85,-86,-87,-88,-89,22,22,22,-96,-97,-98,-99,-100,-101,40,40,22,-92,-93,22,22,22,22,22,22,22,22,40,22,22,22,22,22,22,22,22,-50,]),'ID':([0,14,17,18,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,53,66,70,71,72,75,88,89,90,96,102,103,111,113,116,117,127,129,130,134,138,150,151,152,155,157,164,166,168,172,173,178,185,205,208,209,218,226,],[15,39,49,52,55,67,55,-85,-86,-87,-88,-89,55,55,55,-96,-97,-98,-99,-100,-101,95,109,55,-92,-93,55,123,124,95,55,55,109,55,55,55,55,109,95,95,55,55,109,109,109,109,109,184,55,193,109,55,109,55,55,55,109,55,-50,]),'FOR':([0,],[24,]),'LPAREN':([0,18,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,52,70,71,72,75,88,96,97,98,102,111,113,116,117,134,138,166,173,180,185,200,205,208,218,226,],[19,53,19,19,19,-85,-86,-87,-88,-89,19,19,19,-96,-97,-98,-99,-100,-101,90,19,-92,-93,19,19,19,134,135,19,19,19,19,19,19,19,19,19,199,19,215,19,19,19,-50,]),'FLOAT64':([0,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[26,26,26,26,-85,-86,-87,-88,-89,26,26,26,-96,-97,-98,-99,-100,-101,26,-92,-93,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-50,]),'COMPLEX64':([0,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[27,27,27,27,-85,-86,-87,-88,-89,27,27,27,-96,-97,-98,-99,-100,-101,27,-92,-93,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-50,]),'INT':([0,19,22,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[23,23,62,23,23,-85,-86,-87,-88,-89,23,23,23,-96,-97,-98,-99,-100,-101,23,-92,-93,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-50,]),'BOOL':([0,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[28,28,69,28,-85,-86,-87,-88,-89,28,28,28,-96,-97,-98,-99,-100,-101,69,-92,-93,28,69,28,69,28,28,28,28,28,28,28,28,28,28,28,28,-50,]),'STRING':([0,19,24,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,70,71,72,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,226,],[29,29,29,29,-85,-86,-87,-88,-89,29,29,29,-96,-97,-98,-99,-100,-101,29,-92,-93,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-50,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,110,112,137,141,142,149,161,163,165,169,170,171,183,186,189,198,202,203,207,212,213,214,216,223,225,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-74,-78,-72,-73,-75,-76,-77,-80,-90,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,-91,-59,-51,-41,-58,-29,-84,-104,-46,-40,-56,-27,-103,-52,-57,-20,-105,-45,-53,-28,-13,-21,-47,-22,-39,]),'PLUS':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,193,203,206,207,210,216,224,],[-42,-43,-44,34,-79,34,-74,-78,-72,-73,-75,-76,-77,-80,-90,34,-79,34,-42,-43,-44,-78,-79,34,-75,-77,-65,-66,-67,-68,-69,34,34,34,-78,34,-78,-79,34,-51,-78,34,34,34,34,-84,-46,-56,-52,34,-57,210,-45,34,-53,221,-47,34,]),'MINUS':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,193,203,206,207,211,216,224,],[-42,-43,-44,35,-79,35,-74,-78,-72,-73,-75,-76,-77,-80,-90,35,-79,35,-42,-43,-44,-78,-79,35,-75,-77,-65,-66,-67,-68,-69,35,35,35,-78,35,-78,-79,35,-51,-78,35,35,35,35,-84,-46,-56,-52,35,-57,211,-45,35,-53,222,-47,35,]),'TIMES':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,36,-79,36,-74,-78,-72,-73,-75,-76,-77,-80,-90,36,-79,36,-42,-43,-44,-78,-79,36,-75,-77,-65,-66,-67,-68,-69,36,36,36,-78,36,-78,-79,36,-51,-78,36,36,36,36,-84,-46,-56,-52,36,-57,-45,36,-53,-47,36,]),'DIVIDE':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,37,-79,37,-74,-78,-72,-73,-75,-76,-77,-80,-90,37,-79,37,-42,-43,-44,-78,-79,37,-75,-77,-65,-66,-67,-68,-69,37,37,37,-78,37,-78,-79,37,-51,-78,37,37,37,37,-84,-46,-56,-52,37,-57,-45,37,-53,-47,37,]),'MOD':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,38,-79,38,-74,-78,-72,-73,-75,-76,-77,-80,-90,38,-79,38,-42,-43,-44,-78,-79,38,-75,-77,-65,-66,-67,-68,-69,38,38,38,-78,38,-78,-79,38,-51,-78,38,38,38,38,-84,-46,-56,-52,38,-57,-45,38,-53,-47,38,]),'NOT_EQUAL':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,43,-74,-78,-72,-73,-75,-76,-77,-80,-90,43,-79,-81,-42,-43,-44,-78,-79,43,-75,-77,-65,-66,-67,-68,-69,43,43,43,-78,43,-78,-79,43,-51,-78,43,43,43,43,-84,-46,-56,-52,43,-57,-45,43,-53,-47,43,]),'LESS_THAN':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,44,-74,-78,-72,-73,-75,-76,-77,-80,-90,44,-79,-81,-42,-43,-44,-78,-79,44,-75,-77,-65,-66,-67,-68,-69,44,44,44,-78,44,-78,-79,44,-51,-78,44,44,44,44,-84,-46,-56,-52,44,-57,-45,44,-53,-47,44,]),'LESS_EQUAL':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,45,-74,-78,-72,-73,-75,-76,-77,-80,-90,45,-79,-81,-42,-43,-44,-78,-79,45,-75,-77,-65,-66,-67,-68,-69,45,45,45,-78,45,-78,-79,45,-51,-78,45,45,45,45,-84,-46,-56,-52,45,-57,-45,45,-53,-47,45,]),'GREATER_THAN':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,46,-74,-78,-72,-73,-75,-76,-77,-80,-90,46,-79,-81,-42,-43,-44,-78,-79,46,-75,-77,-65,-66,-67,-68,-69,46,46,46,-78,46,-78,-79,46,-51,-78,46,46,46,46,-84,-46,-56,-52,46,-57,-45,46,-53,-47,46,]),'GREATER_EQUAL':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,47,-74,-78,-72,-73,-75,-76,-77,-80,-90,47,-79,-81,-42,-43,-44,-78,-79,47,-75,-77,-65,-66,-67,-68,-69,47,47,47,-78,47,-78,-79,47,-51,-78,47,47,47,47,-84,-46,-56,-52,47,-57,-45,47,-53,-47,47,]),'EQUAL':([8,9,11,13,15,16,23,25,26,27,28,29,30,31,32,54,55,56,57,58,59,65,67,68,69,73,76,77,78,79,80,81,82,83,110,112,122,123,133,137,139,142,143,147,148,161,165,170,186,188,189,203,206,207,216,224,],[-42,-43,-44,-81,-79,48,-74,-78,-72,-73,-75,-76,-77,-80,-90,48,-79,-81,-42,-43,-44,-78,-79,48,-75,-77,-65,-66,-67,-68,-69,48,48,48,-78,48,-78,-79,48,-51,-78,48,48,48,48,-84,-46,-56,-52,48,-57,-45,48,-53,-47,48,]),'LBRACE':([17,23,24,25,26,27,28,29,30,31,32,49,55,56,57,58,59,65,69,73,76,77,78,79,80,82,83,91,101,110,124,126,128,137,154,161,165,170,186,189,190,191,192,203,207,216,221,222,],[50,-74,66,-78,-72,-73,-75,-76,-77,-80,-90,84,-79,-81,-42,-43,-44,103,-95,-82,-65,-66,-67,-68,-69,-83,-94,127,138,-91,153,155,157,166,178,-84,185,-56,-52,-57,209,-63,-64,-45,-53,-47,-61,-62,]),'PUNTO':([20,95,132,160,],[60,132,160,182,]),'RBRACKET':([22,23,25,26,27,28,29,30,31,32,55,56,57,58,59,62,69,73,76,77,78,79,80,82,83,99,110,137,143,161,165,170,186,189,203,207,216,],[63,-74,-78,-72,-73,-75,-76,-77,-80,-90,-79,-81,-42,-43,-44,100,-95,-82,-65,-66,-67,-68,-69,-83,-94,136,-91,-51,170,-84,-46,-56,-52,-57,-45,-53,-47,]),'DOSPUNTOS':([23,25,26,27,28,29,30,31,32,49,55,56,57,58,59,67,69,73,76,77,78,79,80,81,82,83,109,110,119,122,123,137,146,147,161,165,170,186,189,195,203,206,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,85,-79,-81,-42,-43,-44,85,-95,-82,-65,-66,-67,-68,-69,113,-83,-94,85,-91,150,151,152,-51,172,-70,-84,-46,-56,-52,-57,-71,-45,218,-53,-47,]),'AND':([23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,110,137,161,165,170,186,189,203,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,71,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,-91,-51,-84,-46,-56,-52,-57,-45,-53,-47,]),'OR':([23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,110,137,161,165,170,186,189,203,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,72,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,-91,-51,-84,-46,-56,-52,-57,-45,-53,-47,]),'RBRACE':([23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,86,87,104,105,106,107,108,110,112,114,115,118,120,121,137,140,142,144,145,147,148,156,161,163,165,166,167,170,174,175,176,177,179,181,183,185,186,187,188,189,194,195,196,197,202,203,204,205,207,216,217,219,220,226,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,-102,-30,141,-23,-24,-25,-26,-91,-59,-102,-36,149,-35,-31,-51,169,-58,171,-37,-70,-60,180,-84,-104,-46,186,189,-56,-34,-32,-33,-102,198,200,-103,203,-52,207,-54,-57,-38,-71,212,213,-105,-45,216,-48,-53,-47,-49,-55,225,-50,]),'CASE':([23,25,26,27,28,29,30,31,32,50,55,56,57,58,59,69,73,76,77,78,79,80,82,83,84,87,105,106,107,108,110,112,115,137,142,148,153,161,163,165,170,175,176,183,186,189,194,202,203,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,88,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,116,88,-23,-24,-25,-26,-91,-59,116,-51,-58,-60,116,-84,-104,-46,-56,-32,-33,-103,-52,-57,-38,-105,-45,-53,-47,]),'DEFAULT':([23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,86,87,105,106,107,108,110,112,114,115,121,137,142,145,148,161,163,165,170,175,176,177,183,186,189,194,202,203,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,119,-30,-23,-24,-25,-26,-91,-59,119,-36,-31,-51,-58,-37,-60,-84,-104,-46,-56,-32,-33,119,-103,-52,-57,-38,-105,-45,-53,-47,]),'RPAREN':([23,25,26,27,28,29,30,31,32,53,55,56,57,58,59,69,73,76,77,78,79,80,82,83,90,92,93,94,110,125,131,133,134,137,147,158,159,161,162,165,170,184,186,189,195,199,201,203,207,215,216,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,91,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,126,128,-14,-15,-91,154,-18,161,163,-51,-70,-16,-17,-84,183,-46,-56,202,-52,-57,-71,214,-19,-45,-53,223,-47,]),'SEMICOLON':([23,25,26,27,28,29,30,31,32,51,55,56,57,58,59,64,69,73,76,77,78,79,80,82,83,110,137,139,148,161,165,170,186,189,203,207,216,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,89,-79,-81,-42,-43,-44,102,-95,-82,-65,-66,-67,-68,-69,-83,-94,-91,-51,168,-60,-84,-46,-56,-52,-57,-45,-53,-47,]),'COMMA':([23,25,26,27,28,29,30,31,32,55,56,57,58,59,69,73,76,77,78,79,80,82,83,93,94,110,131,137,147,161,165,170,186,188,189,201,203,207,216,224,],[-74,-78,-72,-73,-75,-76,-77,-80,-90,-79,-81,-42,-43,-44,-95,-82,-65,-66,-67,-68,-69,-83,-94,129,130,-91,-18,-51,173,-84,-46,-56,-52,208,-57,-19,-45,-53,-47,226,]),'ASSIGN':([39,74,76,77,78,79,80,85,],[75,111,-65,-66,-67,-68,-69,117,]),'FLOAT64_TYPE':([39,61,63,95,100,136,182,],[76,76,76,76,76,76,76,]),'COMPLEX64_TYPE':([39,61,63,95,100,136,182,],[77,77,77,77,77,77,77,]),'INT_TYPE':([39,61,63,95,100,136,182,],[78,78,78,78,78,78,78,]),'BOOL_TYPE':([39,61,63,95,100,136,182,],[79,79,79,79,79,79,79,]),'STRING_TYPE':([39,61,63,95,100,136,182,],[80,80,80,80,80,80,80,]),'PRINT_LN':([60,],[97,]),'SCANLN':([60,],[98,]),'POINTER':([135,],[164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,],[1,]),'asignacion':([0,66,103,127,150,151,152,155,157,172,178,209,],[2,106,106,106,106,106,106,106,106,106,106,106,]),'sentenciaSwitch':([0,],[3,]),'funcion':([0,],[4,]),'funcionSinArg':([0,],[5,]),'funcionAnonima':([0,],[6,]),'imprimir':([0,66,103,127,150,151,152,155,157,172,178,209,],[7,107,107,107,107,107,107,107,107,107,107,107,]),'mapa':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[8,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'array':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[9,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'solicitudDatos':([0,66,103,127,150,151,152,155,157,172,178,209,],[10,108,108,108,108,108,108,108,108,108,108,108,]),'slice':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[11,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'for':([0,],[12,]),'expresionAritmetica':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[13,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'valor':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[16,54,68,16,81,82,83,68,112,68,133,68,142,143,147,148,147,147,188,147,206,206,188,224,]),'condiciones':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[25,25,65,25,25,25,25,110,25,122,25,139,25,25,25,25,25,25,25,25,25,25,25,25,]),'expresionesAritmeticas':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[30,30,30,73,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'estructurasDeDatos':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'condicion':([0,19,24,33,40,41,42,70,75,88,96,102,111,113,116,117,134,138,166,173,185,205,208,218,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'operador':([13,16,54,56,68,81,82,83,112,133,142,143,147,148,188,206,224,],[33,41,96,33,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'operadorComp':([16,54,68,81,82,83,112,133,142,143,147,148,188,206,224,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'asignacionCorta':([17,24,66,103,127,150,151,152,155,157,172,178,209,],[51,64,105,105,105,105,105,105,105,105,105,105,105,]),'conector':([32,],[70,]),'tipoDato':([39,61,63,95,100,136,182,],[74,99,101,131,137,165,201,]),'bloqueCasosBooleanos':([50,87,],[86,121,]),'casoBooleano':([50,87,],[87,87,]),'argumentos':([53,90,129,130,],[92,125,158,159,]),'argumento':([53,90,129,130,],[93,93,93,93,]),'argumentoVariadico':([53,90,129,130,],[94,94,94,94,]),'subcodigo':([66,103,127,150,151,152,155,157,172,178,209,],[104,140,156,174,175,176,179,181,194,197,220,]),'bloqueCasosSwitch':([84,115,153,],[114,145,177,]),'casoSwitch':([84,115,153,],[115,115,115,]),'casoDefault':([86,114,177,],[118,144,196,]),'empty':([86,114,177,],[120,120,120,]),'valores':([116,134,138,173,],[146,162,167,195,]),'elementosArray':([166,208,],[187,219,]),'autooperacion':([168,],[190,]),'autoincremento':([168,],[191,]),'autodecremento':([168,],[192,]),'elementosMapa':([185,205,],[204,217,]),'elementoMapa':([185,205,],[205,205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> asignacion','codigo',1,'p_codigo','parserGo.py',6),
  ('codigo -> sentenciaSwitch','codigo',1,'p_codigo','parserGo.py',7),
  ('codigo -> funcion','codigo',1,'p_codigo','parserGo.py',8),
  ('codigo -> funcionSinArg','codigo',1,'p_codigo','parserGo.py',9),
  ('codigo -> funcionAnonima','codigo',1,'p_codigo','parserGo.py',10),
  ('codigo -> imprimir','codigo',1,'p_codigo','parserGo.py',11),
  ('codigo -> mapa','codigo',1,'p_codigo','parserGo.py',12),
  ('codigo -> array','codigo',1,'p_codigo','parserGo.py',13),
  ('codigo -> solicitudDatos','codigo',1,'p_codigo','parserGo.py',14),
  ('codigo -> slice','codigo',1,'p_codigo','parserGo.py',15),
  ('codigo -> for','codigo',1,'p_codigo','parserGo.py',16),
  ('codigo -> expresionAritmetica','codigo',1,'p_codigo','parserGo.py',17),
  ('funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE','funcion',8,'p_funcion','parserGo.py',22),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','parserGo.py',25),
  ('argumentos -> argumentoVariadico','argumentos',1,'p_argumentos','parserGo.py',26),
  ('argumentos -> argumento COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',27),
  ('argumentos -> argumentoVariadico COMMA argumentos','argumentos',3,'p_argumentos','parserGo.py',28),
  ('argumento -> ID tipoDato','argumento',2,'p_argumento','parserGo.py',31),
  ('argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato','argumentoVariadico',5,'p_argumentoVariadico','parserGo.py',34),
  ('funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE','funcionSinArg',7,'p_funcionSinArg','parserGo.py',38),
  ('funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',8,'p_funcion_anonima','parserGo.py',41),
  ('funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN','funcionAnonima',9,'p_funcion_anonima_variadico','parserGo.py',44),
  ('subcodigo -> asignacionCorta','subcodigo',1,'p_subcodigo','parserGo.py',48),
  ('subcodigo -> asignacion','subcodigo',1,'p_subcodigo','parserGo.py',49),
  ('subcodigo -> imprimir','subcodigo',1,'p_subcodigo','parserGo.py',50),
  ('subcodigo -> solicitudDatos','subcodigo',1,'p_subcodigo','parserGo.py',51),
  ('sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',6,'p_sentenciaSwitchClasica','parserGo.py',55),
  ('sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE','sentenciaSwitch',8,'p_switchConDefinicionDeVariable','parserGo.py',58),
  ('sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE','sentenciaSwitch',5,'p_switchNoCondicion','parserGo.py',61),
  ('bloqueCasosBooleanos -> casoBooleano','bloqueCasosBooleanos',1,'p_bloqueCasosBooleanos','parserGo.py',64),
  ('bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos','bloqueCasosBooleanos',2,'p_bloqueCasosBooleanos','parserGo.py',65),
  ('casoBooleano -> CASE condiciones DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',68),
  ('casoBooleano -> CASE ID DOSPUNTOS subcodigo','casoBooleano',4,'p_casoBooleano','parserGo.py',69),
  ('casoDefault -> DEFAULT DOSPUNTOS subcodigo','casoDefault',3,'p_casoDefault','parserGo.py',72),
  ('casoDefault -> empty','casoDefault',1,'p_casoDefault','parserGo.py',73),
  ('bloqueCasosSwitch -> casoSwitch','bloqueCasosSwitch',1,'p_bloqueCasosSwitch','parserGo.py',76),
  ('bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch','bloqueCasosSwitch',2,'p_bloqueCasosSwitch','parserGo.py',77),
  ('casoSwitch -> CASE valores DOSPUNTOS subcodigo','casoSwitch',4,'p_casoSwitch','parserGo.py',80),
  ('for -> FOR asignacionCorta SEMICOLON condiciones SEMICOLON autooperacion LBRACE subcodigo RBRACE','for',9,'p_for','parserGo.py',83),
  ('for -> FOR condiciones LBRACE subcodigo RBRACE','for',5,'p_forCondicion','parserGo.py',86),
  ('for -> FOR LBRACE subcodigo RBRACE','for',4,'p_forInfinito','parserGo.py',89),
  ('estructurasDeDatos -> mapa','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',94),
  ('estructurasDeDatos -> array','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',95),
  ('estructurasDeDatos -> slice','estructurasDeDatos',1,'p_estructurasDeDatos','parserGo.py',96),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE','mapa',7,'p_definicionMapaVacio','parserGo.py',100),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato','mapa',5,'p_definicionMapaVacio','parserGo.py',101),
  ('mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE','mapa',8,'p_definicionMapaValores','parserGo.py',104),
  ('elementosMapa -> elementoMapa','elementosMapa',1,'p_elementosMapa','parserGo.py',107),
  ('elementosMapa -> elementoMapa elementosMapa','elementosMapa',2,'p_elementosMapa','parserGo.py',108),
  ('elementoMapa -> valor DOSPUNTOS valor COMMA','elementoMapa',4,'p_elementoMapa','parserGo.py',111),
  ('array -> LBRACKET INT RBRACKET tipoDato','array',4,'p_arrayVacio','parserGo.py',115),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE','array',6,'p_arrayVacio','parserGo.py',116),
  ('array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE','array',7,'p_arrayConElementos','parserGo.py',119),
  ('elementosArray -> valor','elementosArray',1,'p_elementosArray','parserGo.py',122),
  ('elementosArray -> valor COMMA elementosArray','elementosArray',3,'p_elementosArray','parserGo.py',123),
  ('slice -> ID LBRACKET valor DOSPUNTOS valor RBRACKET','slice',6,'p_slice','parserGo.py',127),
  ('slice -> LBRACKET RBRACKET tipoDato LBRACE valores RBRACE','slice',6,'p_sliceArray','parserGo.py',130),
  ('asignacion -> VAR ID tipoDato ASSIGN valor','asignacion',5,'p_asignacionTipo','parserGo.py',135),
  ('asignacion -> VAR ID ASSIGN valor','asignacion',4,'p_asignacionInferencia','parserGo.py',138),
  ('asignacionCorta -> ID DOSPUNTOS ASSIGN valor','asignacionCorta',4,'p_asignacionCorta','parserGo.py',141),
  ('autoincremento -> ID PLUS PLUS','autoincremento',3,'p_autoincremento','parserGo.py',144),
  ('autodecremento -> ID MINUS MINUS','autodecremento',3,'p_autodecremento','parserGo.py',147),
  ('autooperacion -> autoincremento','autooperacion',1,'p_autooperacion','parserGo.py',150),
  ('autooperacion -> autodecremento','autooperacion',1,'p_autooperacion','parserGo.py',151),
  ('tipoDato -> FLOAT64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',155),
  ('tipoDato -> COMPLEX64_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',156),
  ('tipoDato -> INT_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',157),
  ('tipoDato -> BOOL_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',158),
  ('tipoDato -> STRING_TYPE','tipoDato',1,'p_tipoDato','parserGo.py',159),
  ('valores -> valor','valores',1,'p_valores','parserGo.py',162),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parserGo.py',163),
  ('valor -> FLOAT64','valor',1,'p_valor','parserGo.py',166),
  ('valor -> COMPLEX64','valor',1,'p_valor','parserGo.py',167),
  ('valor -> INT','valor',1,'p_valor','parserGo.py',168),
  ('valor -> BOOL','valor',1,'p_valor','parserGo.py',169),
  ('valor -> STRING','valor',1,'p_valor','parserGo.py',170),
  ('valor -> expresionesAritmeticas','valor',1,'p_valor','parserGo.py',171),
  ('valor -> condiciones','valor',1,'p_valor','parserGo.py',172),
  ('valor -> ID','valor',1,'p_valor','parserGo.py',173),
  ('valor -> estructurasDeDatos','valor',1,'p_valor','parserGo.py',174),
  ('expresionesAritmeticas -> expresionAritmetica','expresionesAritmeticas',1,'p_expresionesAritmeticas','parserGo.py',178),
  ('expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas','expresionesAritmeticas',3,'p_expresionesAritmeticas','parserGo.py',179),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parserGo.py',182),
  ('expresionAritmetica -> LPAREN valor operador valor RPAREN','expresionAritmetica',5,'p_expresionAritmetica','parserGo.py',183),
  ('operador -> PLUS','operador',1,'p_operador','parserGo.py',186),
  ('operador -> MINUS','operador',1,'p_operador','parserGo.py',187),
  ('operador -> TIMES','operador',1,'p_operador','parserGo.py',188),
  ('operador -> DIVIDE','operador',1,'p_operador','parserGo.py',189),
  ('operador -> MOD','operador',1,'p_operador','parserGo.py',190),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parserGo.py',194),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parserGo.py',195),
  ('conector -> AND','conector',1,'p_conector','parserGo.py',198),
  ('conector -> OR','conector',1,'p_conector','parserGo.py',199),
  ('condicion -> valor operadorComp valor','condicion',3,'p_condicion','parserGo.py',202),
  ('condicion -> BOOL','condicion',1,'p_condicion','parserGo.py',203),
  ('operadorComp -> NOT_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',206),
  ('operadorComp -> LESS_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',207),
  ('operadorComp -> LESS_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',208),
  ('operadorComp -> GREATER_THAN','operadorComp',1,'p_operadorComparacion','parserGo.py',209),
  ('operadorComp -> GREATER_EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',210),
  ('operadorComp -> EQUAL','operadorComp',1,'p_operadorComparacion','parserGo.py',211),
  ('empty -> <empty>','empty',0,'p_empty','parserGo.py',214),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN','imprimir',6,'p_imprimir','parserGo.py',219),
  ('imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN','imprimir',5,'p_imprimir','parserGo.py',220),
  ('solicitudDatos -> FMT PUNTO SCANLN LPAREN POINTER ID RPAREN','solicitudDatos',7,'p_solicitud_datos','parserGo.py',224),
]
