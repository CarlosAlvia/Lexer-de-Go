Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CHAN
    COMMENT
    CONST
    CONTINUE
    DEFER
    ELSE
    FALLTHROUGH
    FOR
    GO
    GOTO
    IF
    ILLEGAL
    IMPORT
    INTERFACE
    NOT
    PACKAGE
    RANGE
    RETURN
    SELECT
    STRUCT
    TYPE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> asignacion
Rule 2     codigo -> sentenciaSwitch
Rule 3     codigo -> funcion
Rule 4     codigo -> funcionSinArg
Rule 5     codigo -> funcionAnonima
Rule 6     codigo -> imprimir
Rule 7     codigo -> mapa
Rule 8     codigo -> array
Rule 9     funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE
Rule 10    argumentos -> argumento
Rule 11    argumentos -> argumentoVariadico
Rule 12    argumentos -> argumento COMMA argumentos
Rule 13    argumentos -> argumentoVariadico COMMA argumentos
Rule 14    argumento -> ID tipoDato
Rule 15    argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato
Rule 16    funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE
Rule 17    funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
Rule 18    funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
Rule 19    subcodigo -> asignacionCorta
Rule 20    subcodigo -> asignacion
Rule 21    sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE
Rule 22    sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE
Rule 23    sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE
Rule 24    bloqueCasosBooleanos -> casoBooleano
Rule 25    bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos
Rule 26    casoBooleano -> CASE condiciones DOSPUNTOS subcodigo
Rule 27    casoBooleano -> CASE ID DOSPUNTOS subcodigo
Rule 28    casoDefault -> DEFAULT DOSPUNTOS subcodigo
Rule 29    casoDefault -> empty
Rule 30    bloqueCasosSwitch -> casoSwitch
Rule 31    bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch
Rule 32    casoSwitch -> CASE valores DOSPUNTOS subcodigo
Rule 33    estructurasDeDatos -> mapa
Rule 34    estructurasDeDatos -> array
Rule 35    mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
Rule 36    mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato
Rule 37    mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
Rule 38    elementosMapa -> elementoMapa
Rule 39    elementosMapa -> elementoMapa elementosMapa
Rule 40    elementoMapa -> valor DOSPUNTOS valor COMMA
Rule 41    array -> LBRACKET INT RBRACKET tipoDato
Rule 42    array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
Rule 43    array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE
Rule 44    elementosArray -> valor
Rule 45    elementosArray -> valor COMMA elementosArray
Rule 46    asignacion -> VAR ID tipoDato ASSIGN valor
Rule 47    asignacion -> VAR ID ASSIGN valor
Rule 48    asignacionCorta -> ID DOSPUNTOS ASSIGN valor
Rule 49    tipoDato -> FLOAT64_TYPE
Rule 50    tipoDato -> COMPLEX64_TYPE
Rule 51    tipoDato -> INT_TYPE
Rule 52    tipoDato -> BOOL_TYPE
Rule 53    tipoDato -> STRING_TYPE
Rule 54    valores -> valor
Rule 55    valores -> valor COMMA valores
Rule 56    valor -> FLOAT64
Rule 57    valor -> COMPLEX64
Rule 58    valor -> INT
Rule 59    valor -> BOOL
Rule 60    valor -> STRING
Rule 61    valor -> expresionesAritmeticas
Rule 62    valor -> condiciones
Rule 63    valor -> ID
Rule 64    valor -> estructurasDeDatos
Rule 65    expresionesAritmeticas -> expresionAritmetica
Rule 66    expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas
Rule 67    expresionAritmetica -> valor operador valor
Rule 68    expresionAritmetica -> LPAREN valor operador valor RPAREN
Rule 69    operador -> PLUS
Rule 70    operador -> MINUS
Rule 71    operador -> TIMES
Rule 72    operador -> DIVIDE
Rule 73    operador -> MOD
Rule 74    condiciones -> condicion
Rule 75    condiciones -> condicion conector condiciones
Rule 76    conector -> AND
Rule 77    conector -> OR
Rule 78    condicion -> valor operadorComp valor
Rule 79    condicion -> BOOL
Rule 80    operadorComp -> NOT_EQUAL
Rule 81    operadorComp -> LESS_THAN
Rule 82    operadorComp -> LESS_EQUAL
Rule 83    operadorComp -> GREATER_THAN
Rule 84    operadorComp -> GREATER_EQUAL
Rule 85    operadorComp -> EQUAL
Rule 86    empty -> <empty>
Rule 87    imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN
Rule 88    imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN

Terminals, with rules where they appear

AND                  : 76
ASSIGN               : 46 47 48
BOOL                 : 59 79
BOOL_TYPE            : 52
BREAK                : 
CASE                 : 26 27 32
CHAN                 : 
COMMA                : 12 13 40 45 55
COMMENT              : 
COMPLEX64            : 57
COMPLEX64_TYPE       : 50
CONST                : 
CONTINUE             : 
DEFAULT              : 28
DEFER                : 
DIVIDE               : 72
DOSPUNTOS            : 26 27 28 32 40 48
ELSE                 : 
EQUAL                : 85
FALLTHROUGH          : 
FLOAT64              : 56
FLOAT64_TYPE         : 49
FMT                  : 87 88
FOR                  : 
FUNC                 : 9 16 17 18
GO                   : 
GOTO                 : 
GREATER_EQUAL        : 84
GREATER_THAN         : 83
ID                   : 9 14 15 16 21 22 27 46 47 48 63
IF                   : 
ILLEGAL              : 
IMPORT               : 
INT                  : 41 42 43 58
INTERFACE            : 
INT_TYPE             : 51
LBRACE               : 9 16 17 18 21 22 23 35 37 42 43
LBRACKET             : 35 36 37 41 42 43
LESS_EQUAL           : 82
LESS_THAN            : 81
LPAREN               : 9 16 17 17 18 18 68 87 88
MAP                  : 35 36 37
MINUS                : 70
MOD                  : 73
NOT                  : 
NOT_EQUAL            : 80
OR                   : 77
PACKAGE              : 
PLUS                 : 69
PRINT_LN             : 87 88
PUNTO                : 15 15 15 87 88
RANGE                : 
RBRACE               : 9 16 17 18 21 22 23 35 37 42 43
RBRACKET             : 35 36 37 41 42 43
RETURN               : 
RPAREN               : 9 16 17 17 18 18 68 87 88
SELECT               : 
SEMICOLON            : 22
STRING               : 60
STRING_TYPE          : 53
STRUCT               : 
SWITCH               : 21 22 23
TIMES                : 71
TYPE                 : 
VAR                  : 46 47
error                : 

Nonterminals, with rules where they appear

argumento            : 10 12
argumentoVariadico   : 11 13
argumentos           : 9 12 13 18
array                : 8 34
asignacion           : 1 20
asignacionCorta      : 19 22
bloqueCasosBooleanos : 23 25
bloqueCasosSwitch    : 21 22 31
casoBooleano         : 24 25
casoDefault          : 21 22 23
casoSwitch           : 30 31
codigo               : 0
condicion            : 74 75
condiciones          : 26 62 75
conector             : 75
elementoMapa         : 38 39
elementosArray       : 43 45
elementosMapa        : 37 39
empty                : 29
estructurasDeDatos   : 64
expresionAritmetica  : 65 66
expresionesAritmeticas : 61 66
funcion              : 3
funcionAnonima       : 5
funcionSinArg        : 4
imprimir             : 6
mapa                 : 7 33
operador             : 66 67 68
operadorComp         : 78
sentenciaSwitch      : 2
subcodigo            : 9 16 17 18 26 27 28 32
tipoDato             : 14 15 35 35 36 36 37 37 41 42 43 46
valor                : 40 40 44 45 46 47 48 54 55 67 67 68 68 78 78
valores              : 32 55 87

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . asignacion
    (2) codigo -> . sentenciaSwitch
    (3) codigo -> . funcion
    (4) codigo -> . funcionSinArg
    (5) codigo -> . funcionAnonima
    (6) codigo -> . imprimir
    (7) codigo -> . mapa
    (8) codigo -> . array
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor
    (21) sentenciaSwitch -> . SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE
    (22) sentenciaSwitch -> . SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE
    (23) sentenciaSwitch -> . SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE
    (9) funcion -> . FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE
    (16) funcionSinArg -> . FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE
    (17) funcionAnonima -> . FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
    (18) funcionAnonima -> . FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
    (87) imprimir -> . FMT PUNTO PRINT_LN LPAREN valores RPAREN
    (88) imprimir -> . FMT PUNTO PRINT_LN LPAREN RPAREN
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    VAR             shift and go to state 10
    SWITCH          shift and go to state 11
    FUNC            shift and go to state 12
    FMT             shift and go to state 13
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    codigo                         shift and go to state 1
    asignacion                     shift and go to state 2
    sentenciaSwitch                shift and go to state 3
    funcion                        shift and go to state 4
    funcionSinArg                  shift and go to state 5
    funcionAnonima                 shift and go to state 6
    imprimir                       shift and go to state 7
    mapa                           shift and go to state 8
    array                          shift and go to state 9

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> asignacion .

    $end            reduce using rule 1 (codigo -> asignacion .)


state 3

    (2) codigo -> sentenciaSwitch .

    $end            reduce using rule 2 (codigo -> sentenciaSwitch .)


state 4

    (3) codigo -> funcion .

    $end            reduce using rule 3 (codigo -> funcion .)


state 5

    (4) codigo -> funcionSinArg .

    $end            reduce using rule 4 (codigo -> funcionSinArg .)


state 6

    (5) codigo -> funcionAnonima .

    $end            reduce using rule 5 (codigo -> funcionAnonima .)


state 7

    (6) codigo -> imprimir .

    $end            reduce using rule 6 (codigo -> imprimir .)


state 8

    (7) codigo -> mapa .

    $end            reduce using rule 7 (codigo -> mapa .)


state 9

    (8) codigo -> array .

    $end            reduce using rule 8 (codigo -> array .)


state 10

    (46) asignacion -> VAR . ID tipoDato ASSIGN valor
    (47) asignacion -> VAR . ID ASSIGN valor

    ID              shift and go to state 16


state 11

    (21) sentenciaSwitch -> SWITCH . ID LBRACE bloqueCasosSwitch casoDefault RBRACE
    (22) sentenciaSwitch -> SWITCH . asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE
    (23) sentenciaSwitch -> SWITCH . LBRACE bloqueCasosBooleanos casoDefault RBRACE
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor

    ID              shift and go to state 17
    LBRACE          shift and go to state 18

    asignacionCorta                shift and go to state 19

state 12

    (9) funcion -> FUNC . ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE
    (16) funcionSinArg -> FUNC . ID LPAREN RPAREN LBRACE subcodigo RBRACE
    (17) funcionAnonima -> FUNC . LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
    (18) funcionAnonima -> FUNC . LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN

    ID              shift and go to state 20
    LPAREN          shift and go to state 21


state 13

    (87) imprimir -> FMT . PUNTO PRINT_LN LPAREN valores RPAREN
    (88) imprimir -> FMT . PUNTO PRINT_LN LPAREN RPAREN

    PUNTO           shift and go to state 22


state 14

    (35) mapa -> MAP . LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> MAP . LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> MAP . LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE

    LBRACKET        shift and go to state 23


state 15

    (41) array -> LBRACKET . INT RBRACKET tipoDato
    (42) array -> LBRACKET . INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> LBRACKET . INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    INT             shift and go to state 24


state 16

    (46) asignacion -> VAR ID . tipoDato ASSIGN valor
    (47) asignacion -> VAR ID . ASSIGN valor
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    ASSIGN          shift and go to state 26
    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 25

state 17

    (21) sentenciaSwitch -> SWITCH ID . LBRACE bloqueCasosSwitch casoDefault RBRACE
    (48) asignacionCorta -> ID . DOSPUNTOS ASSIGN valor

    LBRACE          shift and go to state 32
    DOSPUNTOS       shift and go to state 33


state 18

    (23) sentenciaSwitch -> SWITCH LBRACE . bloqueCasosBooleanos casoDefault RBRACE
    (24) bloqueCasosBooleanos -> . casoBooleano
    (25) bloqueCasosBooleanos -> . casoBooleano bloqueCasosBooleanos
    (26) casoBooleano -> . CASE condiciones DOSPUNTOS subcodigo
    (27) casoBooleano -> . CASE ID DOSPUNTOS subcodigo

    CASE            shift and go to state 36

    bloqueCasosBooleanos           shift and go to state 34
    casoBooleano                   shift and go to state 35

state 19

    (22) sentenciaSwitch -> SWITCH asignacionCorta . SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE

    SEMICOLON       shift and go to state 37


state 20

    (9) funcion -> FUNC ID . LPAREN argumentos RPAREN LBRACE subcodigo RBRACE
    (16) funcionSinArg -> FUNC ID . LPAREN RPAREN LBRACE subcodigo RBRACE

    LPAREN          shift and go to state 38


state 21

    (17) funcionAnonima -> FUNC LPAREN . RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
    (18) funcionAnonima -> FUNC LPAREN . argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN
    (10) argumentos -> . argumento
    (11) argumentos -> . argumentoVariadico
    (12) argumentos -> . argumento COMMA argumentos
    (13) argumentos -> . argumentoVariadico COMMA argumentos
    (14) argumento -> . ID tipoDato
    (15) argumentoVariadico -> . ID PUNTO PUNTO PUNTO tipoDato

    RPAREN          shift and go to state 39
    ID              shift and go to state 43

    argumentos                     shift and go to state 40
    argumento                      shift and go to state 41
    argumentoVariadico             shift and go to state 42

state 22

    (87) imprimir -> FMT PUNTO . PRINT_LN LPAREN valores RPAREN
    (88) imprimir -> FMT PUNTO . PRINT_LN LPAREN RPAREN

    PRINT_LN        shift and go to state 44


state 23

    (35) mapa -> MAP LBRACKET . tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> MAP LBRACKET . tipoDato RBRACKET tipoDato
    (37) mapa -> MAP LBRACKET . tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 45

state 24

    (41) array -> LBRACKET INT . RBRACKET tipoDato
    (42) array -> LBRACKET INT . RBRACKET tipoDato LBRACE RBRACE
    (43) array -> LBRACKET INT . RBRACKET tipoDato LBRACE elementosArray RBRACE

    RBRACKET        shift and go to state 46


state 25

    (46) asignacion -> VAR ID tipoDato . ASSIGN valor

    ASSIGN          shift and go to state 47


state 26

    (47) asignacion -> VAR ID ASSIGN . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 49
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 27

    (49) tipoDato -> FLOAT64_TYPE .

    ASSIGN          reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    RBRACKET        reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    COMMA           reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    RPAREN          reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    $end            reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    PLUS            reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    MINUS           reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    TIMES           reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    DIVIDE          reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    MOD             reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    NOT_EQUAL       reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    LESS_THAN       reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    LESS_EQUAL      reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    GREATER_THAN    reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    GREATER_EQUAL   reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    EQUAL           reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    CASE            reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    DEFAULT         reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    DOSPUNTOS       reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    SEMICOLON       reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    AND             reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)
    OR              reduce using rule 49 (tipoDato -> FLOAT64_TYPE .)


state 28

    (50) tipoDato -> COMPLEX64_TYPE .

    ASSIGN          reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    RBRACKET        reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    COMMA           reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    RPAREN          reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    LBRACE          reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    $end            reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    PLUS            reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    MINUS           reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    TIMES           reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    DIVIDE          reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    MOD             reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    NOT_EQUAL       reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    LESS_THAN       reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    LESS_EQUAL      reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    GREATER_THAN    reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    GREATER_EQUAL   reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    EQUAL           reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    RBRACE          reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    CASE            reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    DEFAULT         reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    DOSPUNTOS       reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    SEMICOLON       reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    AND             reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)
    OR              reduce using rule 50 (tipoDato -> COMPLEX64_TYPE .)


state 29

    (51) tipoDato -> INT_TYPE .

    ASSIGN          reduce using rule 51 (tipoDato -> INT_TYPE .)
    RBRACKET        reduce using rule 51 (tipoDato -> INT_TYPE .)
    COMMA           reduce using rule 51 (tipoDato -> INT_TYPE .)
    RPAREN          reduce using rule 51 (tipoDato -> INT_TYPE .)
    LBRACE          reduce using rule 51 (tipoDato -> INT_TYPE .)
    $end            reduce using rule 51 (tipoDato -> INT_TYPE .)
    PLUS            reduce using rule 51 (tipoDato -> INT_TYPE .)
    MINUS           reduce using rule 51 (tipoDato -> INT_TYPE .)
    TIMES           reduce using rule 51 (tipoDato -> INT_TYPE .)
    DIVIDE          reduce using rule 51 (tipoDato -> INT_TYPE .)
    MOD             reduce using rule 51 (tipoDato -> INT_TYPE .)
    NOT_EQUAL       reduce using rule 51 (tipoDato -> INT_TYPE .)
    LESS_THAN       reduce using rule 51 (tipoDato -> INT_TYPE .)
    LESS_EQUAL      reduce using rule 51 (tipoDato -> INT_TYPE .)
    GREATER_THAN    reduce using rule 51 (tipoDato -> INT_TYPE .)
    GREATER_EQUAL   reduce using rule 51 (tipoDato -> INT_TYPE .)
    EQUAL           reduce using rule 51 (tipoDato -> INT_TYPE .)
    RBRACE          reduce using rule 51 (tipoDato -> INT_TYPE .)
    CASE            reduce using rule 51 (tipoDato -> INT_TYPE .)
    DEFAULT         reduce using rule 51 (tipoDato -> INT_TYPE .)
    DOSPUNTOS       reduce using rule 51 (tipoDato -> INT_TYPE .)
    SEMICOLON       reduce using rule 51 (tipoDato -> INT_TYPE .)
    AND             reduce using rule 51 (tipoDato -> INT_TYPE .)
    OR              reduce using rule 51 (tipoDato -> INT_TYPE .)


state 30

    (52) tipoDato -> BOOL_TYPE .

    ASSIGN          reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    RBRACKET        reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    COMMA           reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    RPAREN          reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    LBRACE          reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    $end            reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    PLUS            reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    MINUS           reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    TIMES           reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    DIVIDE          reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    MOD             reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    NOT_EQUAL       reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    LESS_THAN       reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    LESS_EQUAL      reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    GREATER_EQUAL   reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    EQUAL           reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    RBRACE          reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    CASE            reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    DEFAULT         reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    DOSPUNTOS       reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    SEMICOLON       reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    AND             reduce using rule 52 (tipoDato -> BOOL_TYPE .)
    OR              reduce using rule 52 (tipoDato -> BOOL_TYPE .)


state 31

    (53) tipoDato -> STRING_TYPE .

    ASSIGN          reduce using rule 53 (tipoDato -> STRING_TYPE .)
    RBRACKET        reduce using rule 53 (tipoDato -> STRING_TYPE .)
    COMMA           reduce using rule 53 (tipoDato -> STRING_TYPE .)
    RPAREN          reduce using rule 53 (tipoDato -> STRING_TYPE .)
    LBRACE          reduce using rule 53 (tipoDato -> STRING_TYPE .)
    $end            reduce using rule 53 (tipoDato -> STRING_TYPE .)
    PLUS            reduce using rule 53 (tipoDato -> STRING_TYPE .)
    MINUS           reduce using rule 53 (tipoDato -> STRING_TYPE .)
    TIMES           reduce using rule 53 (tipoDato -> STRING_TYPE .)
    DIVIDE          reduce using rule 53 (tipoDato -> STRING_TYPE .)
    MOD             reduce using rule 53 (tipoDato -> STRING_TYPE .)
    NOT_EQUAL       reduce using rule 53 (tipoDato -> STRING_TYPE .)
    LESS_THAN       reduce using rule 53 (tipoDato -> STRING_TYPE .)
    LESS_EQUAL      reduce using rule 53 (tipoDato -> STRING_TYPE .)
    GREATER_THAN    reduce using rule 53 (tipoDato -> STRING_TYPE .)
    GREATER_EQUAL   reduce using rule 53 (tipoDato -> STRING_TYPE .)
    EQUAL           reduce using rule 53 (tipoDato -> STRING_TYPE .)
    RBRACE          reduce using rule 53 (tipoDato -> STRING_TYPE .)
    CASE            reduce using rule 53 (tipoDato -> STRING_TYPE .)
    DEFAULT         reduce using rule 53 (tipoDato -> STRING_TYPE .)
    DOSPUNTOS       reduce using rule 53 (tipoDato -> STRING_TYPE .)
    SEMICOLON       reduce using rule 53 (tipoDato -> STRING_TYPE .)
    AND             reduce using rule 53 (tipoDato -> STRING_TYPE .)
    OR              reduce using rule 53 (tipoDato -> STRING_TYPE .)


state 32

    (21) sentenciaSwitch -> SWITCH ID LBRACE . bloqueCasosSwitch casoDefault RBRACE
    (30) bloqueCasosSwitch -> . casoSwitch
    (31) bloqueCasosSwitch -> . casoSwitch bloqueCasosSwitch
    (32) casoSwitch -> . CASE valores DOSPUNTOS subcodigo

    CASE            shift and go to state 65

    bloqueCasosSwitch              shift and go to state 63
    casoSwitch                     shift and go to state 64

state 33

    (48) asignacionCorta -> ID DOSPUNTOS . ASSIGN valor

    ASSIGN          shift and go to state 66


state 34

    (23) sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos . casoDefault RBRACE
    (28) casoDefault -> . DEFAULT DOSPUNTOS subcodigo
    (29) casoDefault -> . empty
    (86) empty -> .

    DEFAULT         shift and go to state 68
    RBRACE          reduce using rule 86 (empty -> .)

    casoDefault                    shift and go to state 67
    empty                          shift and go to state 69

state 35

    (24) bloqueCasosBooleanos -> casoBooleano .
    (25) bloqueCasosBooleanos -> casoBooleano . bloqueCasosBooleanos
    (24) bloqueCasosBooleanos -> . casoBooleano
    (25) bloqueCasosBooleanos -> . casoBooleano bloqueCasosBooleanos
    (26) casoBooleano -> . CASE condiciones DOSPUNTOS subcodigo
    (27) casoBooleano -> . CASE ID DOSPUNTOS subcodigo

    DEFAULT         reduce using rule 24 (bloqueCasosBooleanos -> casoBooleano .)
    RBRACE          reduce using rule 24 (bloqueCasosBooleanos -> casoBooleano .)
    CASE            shift and go to state 36

    casoBooleano                   shift and go to state 35
    bloqueCasosBooleanos           shift and go to state 70

state 36

    (26) casoBooleano -> CASE . condiciones DOSPUNTOS subcodigo
    (27) casoBooleano -> CASE . ID DOSPUNTOS subcodigo
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    ID              shift and go to state 72
    BOOL            shift and go to state 74
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    STRING          shift and go to state 54
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    condiciones                    shift and go to state 71
    condicion                      shift and go to state 59
    valor                          shift and go to state 73
    expresionesAritmeticas         shift and go to state 55
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 37

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON . ID LBRACE bloqueCasosSwitch casoDefault RBRACE

    ID              shift and go to state 75


state 38

    (9) funcion -> FUNC ID LPAREN . argumentos RPAREN LBRACE subcodigo RBRACE
    (16) funcionSinArg -> FUNC ID LPAREN . RPAREN LBRACE subcodigo RBRACE
    (10) argumentos -> . argumento
    (11) argumentos -> . argumentoVariadico
    (12) argumentos -> . argumento COMMA argumentos
    (13) argumentos -> . argumentoVariadico COMMA argumentos
    (14) argumento -> . ID tipoDato
    (15) argumentoVariadico -> . ID PUNTO PUNTO PUNTO tipoDato

    RPAREN          shift and go to state 77
    ID              shift and go to state 43

    argumentos                     shift and go to state 76
    argumento                      shift and go to state 41
    argumentoVariadico             shift and go to state 42

state 39

    (17) funcionAnonima -> FUNC LPAREN RPAREN . LBRACE subcodigo RBRACE LPAREN RPAREN

    LBRACE          shift and go to state 78


state 40

    (18) funcionAnonima -> FUNC LPAREN argumentos . RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN

    RPAREN          shift and go to state 79


state 41

    (10) argumentos -> argumento .
    (12) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 10 (argumentos -> argumento .)
    COMMA           shift and go to state 80


state 42

    (11) argumentos -> argumentoVariadico .
    (13) argumentos -> argumentoVariadico . COMMA argumentos

    RPAREN          reduce using rule 11 (argumentos -> argumentoVariadico .)
    COMMA           shift and go to state 81


state 43

    (14) argumento -> ID . tipoDato
    (15) argumentoVariadico -> ID . PUNTO PUNTO PUNTO tipoDato
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    PUNTO           shift and go to state 83
    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 82

state 44

    (87) imprimir -> FMT PUNTO PRINT_LN . LPAREN valores RPAREN
    (88) imprimir -> FMT PUNTO PRINT_LN . LPAREN RPAREN

    LPAREN          shift and go to state 84


state 45

    (35) mapa -> MAP LBRACKET tipoDato . RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> MAP LBRACKET tipoDato . RBRACKET tipoDato
    (37) mapa -> MAP LBRACKET tipoDato . RBRACKET tipoDato LBRACE elementosMapa RBRACE

    RBRACKET        shift and go to state 85


state 46

    (41) array -> LBRACKET INT RBRACKET . tipoDato
    (42) array -> LBRACKET INT RBRACKET . tipoDato LBRACE RBRACE
    (43) array -> LBRACKET INT RBRACKET . tipoDato LBRACE elementosArray RBRACE
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 86

state 47

    (46) asignacion -> VAR ID tipoDato ASSIGN . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 87
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 48

    (63) valor -> ID .

    PLUS            reduce using rule 63 (valor -> ID .)
    MINUS           reduce using rule 63 (valor -> ID .)
    TIMES           reduce using rule 63 (valor -> ID .)
    DIVIDE          reduce using rule 63 (valor -> ID .)
    MOD             reduce using rule 63 (valor -> ID .)
    NOT_EQUAL       reduce using rule 63 (valor -> ID .)
    LESS_THAN       reduce using rule 63 (valor -> ID .)
    LESS_EQUAL      reduce using rule 63 (valor -> ID .)
    GREATER_THAN    reduce using rule 63 (valor -> ID .)
    GREATER_EQUAL   reduce using rule 63 (valor -> ID .)
    EQUAL           reduce using rule 63 (valor -> ID .)
    $end            reduce using rule 63 (valor -> ID .)
    RBRACE          reduce using rule 63 (valor -> ID .)
    CASE            reduce using rule 63 (valor -> ID .)
    DEFAULT         reduce using rule 63 (valor -> ID .)
    COMMA           reduce using rule 63 (valor -> ID .)
    DOSPUNTOS       reduce using rule 63 (valor -> ID .)
    SEMICOLON       reduce using rule 63 (valor -> ID .)
    RPAREN          reduce using rule 63 (valor -> ID .)
    AND             reduce using rule 63 (valor -> ID .)
    OR              reduce using rule 63 (valor -> ID .)


state 49

    (47) asignacion -> VAR ID ASSIGN valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    $end            reduce using rule 47 (asignacion -> VAR ID ASSIGN valor .)
    RBRACE          reduce using rule 47 (asignacion -> VAR ID ASSIGN valor .)
    CASE            reduce using rule 47 (asignacion -> VAR ID ASSIGN valor .)
    DEFAULT         reduce using rule 47 (asignacion -> VAR ID ASSIGN valor .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 50

    (56) valor -> FLOAT64 .

    PLUS            reduce using rule 56 (valor -> FLOAT64 .)
    MINUS           reduce using rule 56 (valor -> FLOAT64 .)
    TIMES           reduce using rule 56 (valor -> FLOAT64 .)
    DIVIDE          reduce using rule 56 (valor -> FLOAT64 .)
    MOD             reduce using rule 56 (valor -> FLOAT64 .)
    NOT_EQUAL       reduce using rule 56 (valor -> FLOAT64 .)
    LESS_THAN       reduce using rule 56 (valor -> FLOAT64 .)
    LESS_EQUAL      reduce using rule 56 (valor -> FLOAT64 .)
    GREATER_THAN    reduce using rule 56 (valor -> FLOAT64 .)
    GREATER_EQUAL   reduce using rule 56 (valor -> FLOAT64 .)
    EQUAL           reduce using rule 56 (valor -> FLOAT64 .)
    $end            reduce using rule 56 (valor -> FLOAT64 .)
    RBRACE          reduce using rule 56 (valor -> FLOAT64 .)
    CASE            reduce using rule 56 (valor -> FLOAT64 .)
    DEFAULT         reduce using rule 56 (valor -> FLOAT64 .)
    COMMA           reduce using rule 56 (valor -> FLOAT64 .)
    DOSPUNTOS       reduce using rule 56 (valor -> FLOAT64 .)
    SEMICOLON       reduce using rule 56 (valor -> FLOAT64 .)
    RPAREN          reduce using rule 56 (valor -> FLOAT64 .)
    AND             reduce using rule 56 (valor -> FLOAT64 .)
    OR              reduce using rule 56 (valor -> FLOAT64 .)


state 51

    (57) valor -> COMPLEX64 .

    PLUS            reduce using rule 57 (valor -> COMPLEX64 .)
    MINUS           reduce using rule 57 (valor -> COMPLEX64 .)
    TIMES           reduce using rule 57 (valor -> COMPLEX64 .)
    DIVIDE          reduce using rule 57 (valor -> COMPLEX64 .)
    MOD             reduce using rule 57 (valor -> COMPLEX64 .)
    NOT_EQUAL       reduce using rule 57 (valor -> COMPLEX64 .)
    LESS_THAN       reduce using rule 57 (valor -> COMPLEX64 .)
    LESS_EQUAL      reduce using rule 57 (valor -> COMPLEX64 .)
    GREATER_THAN    reduce using rule 57 (valor -> COMPLEX64 .)
    GREATER_EQUAL   reduce using rule 57 (valor -> COMPLEX64 .)
    EQUAL           reduce using rule 57 (valor -> COMPLEX64 .)
    $end            reduce using rule 57 (valor -> COMPLEX64 .)
    RBRACE          reduce using rule 57 (valor -> COMPLEX64 .)
    CASE            reduce using rule 57 (valor -> COMPLEX64 .)
    DEFAULT         reduce using rule 57 (valor -> COMPLEX64 .)
    COMMA           reduce using rule 57 (valor -> COMPLEX64 .)
    DOSPUNTOS       reduce using rule 57 (valor -> COMPLEX64 .)
    SEMICOLON       reduce using rule 57 (valor -> COMPLEX64 .)
    RPAREN          reduce using rule 57 (valor -> COMPLEX64 .)
    AND             reduce using rule 57 (valor -> COMPLEX64 .)
    OR              reduce using rule 57 (valor -> COMPLEX64 .)


state 52

    (58) valor -> INT .

    PLUS            reduce using rule 58 (valor -> INT .)
    MINUS           reduce using rule 58 (valor -> INT .)
    TIMES           reduce using rule 58 (valor -> INT .)
    DIVIDE          reduce using rule 58 (valor -> INT .)
    MOD             reduce using rule 58 (valor -> INT .)
    NOT_EQUAL       reduce using rule 58 (valor -> INT .)
    LESS_THAN       reduce using rule 58 (valor -> INT .)
    LESS_EQUAL      reduce using rule 58 (valor -> INT .)
    GREATER_THAN    reduce using rule 58 (valor -> INT .)
    GREATER_EQUAL   reduce using rule 58 (valor -> INT .)
    EQUAL           reduce using rule 58 (valor -> INT .)
    $end            reduce using rule 58 (valor -> INT .)
    RBRACE          reduce using rule 58 (valor -> INT .)
    CASE            reduce using rule 58 (valor -> INT .)
    DEFAULT         reduce using rule 58 (valor -> INT .)
    COMMA           reduce using rule 58 (valor -> INT .)
    DOSPUNTOS       reduce using rule 58 (valor -> INT .)
    SEMICOLON       reduce using rule 58 (valor -> INT .)
    RPAREN          reduce using rule 58 (valor -> INT .)
    AND             reduce using rule 58 (valor -> INT .)
    OR              reduce using rule 58 (valor -> INT .)


state 53

    (59) valor -> BOOL .
    (79) condicion -> BOOL .

  ! reduce/reduce conflict for AND resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for OR resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for PLUS resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for TIMES resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for MOD resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for $end resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for RBRACE resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for CASE resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for DOSPUNTOS resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for RPAREN resolved using rule 59 (valor -> BOOL .)
    PLUS            reduce using rule 59 (valor -> BOOL .)
    MINUS           reduce using rule 59 (valor -> BOOL .)
    TIMES           reduce using rule 59 (valor -> BOOL .)
    DIVIDE          reduce using rule 59 (valor -> BOOL .)
    MOD             reduce using rule 59 (valor -> BOOL .)
    NOT_EQUAL       reduce using rule 59 (valor -> BOOL .)
    LESS_THAN       reduce using rule 59 (valor -> BOOL .)
    LESS_EQUAL      reduce using rule 59 (valor -> BOOL .)
    GREATER_THAN    reduce using rule 59 (valor -> BOOL .)
    GREATER_EQUAL   reduce using rule 59 (valor -> BOOL .)
    EQUAL           reduce using rule 59 (valor -> BOOL .)
    $end            reduce using rule 59 (valor -> BOOL .)
    RBRACE          reduce using rule 59 (valor -> BOOL .)
    CASE            reduce using rule 59 (valor -> BOOL .)
    DEFAULT         reduce using rule 59 (valor -> BOOL .)
    COMMA           reduce using rule 59 (valor -> BOOL .)
    DOSPUNTOS       reduce using rule 59 (valor -> BOOL .)
    SEMICOLON       reduce using rule 59 (valor -> BOOL .)
    RPAREN          reduce using rule 59 (valor -> BOOL .)
    AND             reduce using rule 59 (valor -> BOOL .)
    OR              reduce using rule 59 (valor -> BOOL .)

  ! AND             [ reduce using rule 79 (condicion -> BOOL .) ]
  ! OR              [ reduce using rule 79 (condicion -> BOOL .) ]
  ! PLUS            [ reduce using rule 79 (condicion -> BOOL .) ]
  ! MINUS           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! TIMES           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! DIVIDE          [ reduce using rule 79 (condicion -> BOOL .) ]
  ! MOD             [ reduce using rule 79 (condicion -> BOOL .) ]
  ! NOT_EQUAL       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! LESS_THAN       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (condicion -> BOOL .) ]
  ! GREATER_THAN    [ reduce using rule 79 (condicion -> BOOL .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (condicion -> BOOL .) ]
  ! EQUAL           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! $end            [ reduce using rule 79 (condicion -> BOOL .) ]
  ! RBRACE          [ reduce using rule 79 (condicion -> BOOL .) ]
  ! CASE            [ reduce using rule 79 (condicion -> BOOL .) ]
  ! DEFAULT         [ reduce using rule 79 (condicion -> BOOL .) ]
  ! COMMA           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! DOSPUNTOS       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! SEMICOLON       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! RPAREN          [ reduce using rule 79 (condicion -> BOOL .) ]


state 54

    (60) valor -> STRING .

    PLUS            reduce using rule 60 (valor -> STRING .)
    MINUS           reduce using rule 60 (valor -> STRING .)
    TIMES           reduce using rule 60 (valor -> STRING .)
    DIVIDE          reduce using rule 60 (valor -> STRING .)
    MOD             reduce using rule 60 (valor -> STRING .)
    NOT_EQUAL       reduce using rule 60 (valor -> STRING .)
    LESS_THAN       reduce using rule 60 (valor -> STRING .)
    LESS_EQUAL      reduce using rule 60 (valor -> STRING .)
    GREATER_THAN    reduce using rule 60 (valor -> STRING .)
    GREATER_EQUAL   reduce using rule 60 (valor -> STRING .)
    EQUAL           reduce using rule 60 (valor -> STRING .)
    $end            reduce using rule 60 (valor -> STRING .)
    RBRACE          reduce using rule 60 (valor -> STRING .)
    CASE            reduce using rule 60 (valor -> STRING .)
    DEFAULT         reduce using rule 60 (valor -> STRING .)
    COMMA           reduce using rule 60 (valor -> STRING .)
    DOSPUNTOS       reduce using rule 60 (valor -> STRING .)
    SEMICOLON       reduce using rule 60 (valor -> STRING .)
    RPAREN          reduce using rule 60 (valor -> STRING .)
    AND             reduce using rule 60 (valor -> STRING .)
    OR              reduce using rule 60 (valor -> STRING .)


state 55

    (61) valor -> expresionesAritmeticas .

    PLUS            reduce using rule 61 (valor -> expresionesAritmeticas .)
    MINUS           reduce using rule 61 (valor -> expresionesAritmeticas .)
    TIMES           reduce using rule 61 (valor -> expresionesAritmeticas .)
    DIVIDE          reduce using rule 61 (valor -> expresionesAritmeticas .)
    MOD             reduce using rule 61 (valor -> expresionesAritmeticas .)
    NOT_EQUAL       reduce using rule 61 (valor -> expresionesAritmeticas .)
    LESS_THAN       reduce using rule 61 (valor -> expresionesAritmeticas .)
    LESS_EQUAL      reduce using rule 61 (valor -> expresionesAritmeticas .)
    GREATER_THAN    reduce using rule 61 (valor -> expresionesAritmeticas .)
    GREATER_EQUAL   reduce using rule 61 (valor -> expresionesAritmeticas .)
    EQUAL           reduce using rule 61 (valor -> expresionesAritmeticas .)
    $end            reduce using rule 61 (valor -> expresionesAritmeticas .)
    RBRACE          reduce using rule 61 (valor -> expresionesAritmeticas .)
    CASE            reduce using rule 61 (valor -> expresionesAritmeticas .)
    DEFAULT         reduce using rule 61 (valor -> expresionesAritmeticas .)
    COMMA           reduce using rule 61 (valor -> expresionesAritmeticas .)
    DOSPUNTOS       reduce using rule 61 (valor -> expresionesAritmeticas .)
    SEMICOLON       reduce using rule 61 (valor -> expresionesAritmeticas .)
    RPAREN          reduce using rule 61 (valor -> expresionesAritmeticas .)
    AND             reduce using rule 61 (valor -> expresionesAritmeticas .)
    OR              reduce using rule 61 (valor -> expresionesAritmeticas .)


state 56

    (62) valor -> condiciones .

    PLUS            reduce using rule 62 (valor -> condiciones .)
    MINUS           reduce using rule 62 (valor -> condiciones .)
    TIMES           reduce using rule 62 (valor -> condiciones .)
    DIVIDE          reduce using rule 62 (valor -> condiciones .)
    MOD             reduce using rule 62 (valor -> condiciones .)
    NOT_EQUAL       reduce using rule 62 (valor -> condiciones .)
    LESS_THAN       reduce using rule 62 (valor -> condiciones .)
    LESS_EQUAL      reduce using rule 62 (valor -> condiciones .)
    GREATER_THAN    reduce using rule 62 (valor -> condiciones .)
    GREATER_EQUAL   reduce using rule 62 (valor -> condiciones .)
    EQUAL           reduce using rule 62 (valor -> condiciones .)
    $end            reduce using rule 62 (valor -> condiciones .)
    RBRACE          reduce using rule 62 (valor -> condiciones .)
    CASE            reduce using rule 62 (valor -> condiciones .)
    DEFAULT         reduce using rule 62 (valor -> condiciones .)
    COMMA           reduce using rule 62 (valor -> condiciones .)
    DOSPUNTOS       reduce using rule 62 (valor -> condiciones .)
    SEMICOLON       reduce using rule 62 (valor -> condiciones .)
    RPAREN          reduce using rule 62 (valor -> condiciones .)
    AND             reduce using rule 62 (valor -> condiciones .)
    OR              reduce using rule 62 (valor -> condiciones .)


state 57

    (64) valor -> estructurasDeDatos .

    PLUS            reduce using rule 64 (valor -> estructurasDeDatos .)
    MINUS           reduce using rule 64 (valor -> estructurasDeDatos .)
    TIMES           reduce using rule 64 (valor -> estructurasDeDatos .)
    DIVIDE          reduce using rule 64 (valor -> estructurasDeDatos .)
    MOD             reduce using rule 64 (valor -> estructurasDeDatos .)
    NOT_EQUAL       reduce using rule 64 (valor -> estructurasDeDatos .)
    LESS_THAN       reduce using rule 64 (valor -> estructurasDeDatos .)
    LESS_EQUAL      reduce using rule 64 (valor -> estructurasDeDatos .)
    GREATER_THAN    reduce using rule 64 (valor -> estructurasDeDatos .)
    GREATER_EQUAL   reduce using rule 64 (valor -> estructurasDeDatos .)
    EQUAL           reduce using rule 64 (valor -> estructurasDeDatos .)
    $end            reduce using rule 64 (valor -> estructurasDeDatos .)
    RBRACE          reduce using rule 64 (valor -> estructurasDeDatos .)
    CASE            reduce using rule 64 (valor -> estructurasDeDatos .)
    DEFAULT         reduce using rule 64 (valor -> estructurasDeDatos .)
    COMMA           reduce using rule 64 (valor -> estructurasDeDatos .)
    DOSPUNTOS       reduce using rule 64 (valor -> estructurasDeDatos .)
    SEMICOLON       reduce using rule 64 (valor -> estructurasDeDatos .)
    RPAREN          reduce using rule 64 (valor -> estructurasDeDatos .)
    AND             reduce using rule 64 (valor -> estructurasDeDatos .)
    OR              reduce using rule 64 (valor -> estructurasDeDatos .)


state 58

    (65) expresionesAritmeticas -> expresionAritmetica .
    (66) expresionesAritmeticas -> expresionAritmetica . operador expresionesAritmeticas
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    NOT_EQUAL       reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    LESS_THAN       reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    LESS_EQUAL      reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    GREATER_THAN    reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    GREATER_EQUAL   reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    EQUAL           reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    $end            reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    RBRACE          reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    CASE            reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    DEFAULT         reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    COMMA           reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    DOSPUNTOS       reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    SEMICOLON       reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    RPAREN          reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    AND             reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    OR              reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94

  ! PLUS            [ reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .) ]
  ! MINUS           [ reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .) ]
  ! TIMES           [ reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .) ]
  ! DIVIDE          [ reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .) ]
  ! MOD             [ reduce using rule 65 (expresionesAritmeticas -> expresionAritmetica .) ]

    operador                       shift and go to state 101

state 59

    (74) condiciones -> condicion .
    (75) condiciones -> condicion . conector condiciones
    (76) conector -> . AND
    (77) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PLUS            reduce using rule 74 (condiciones -> condicion .)
    MINUS           reduce using rule 74 (condiciones -> condicion .)
    TIMES           reduce using rule 74 (condiciones -> condicion .)
    DIVIDE          reduce using rule 74 (condiciones -> condicion .)
    MOD             reduce using rule 74 (condiciones -> condicion .)
    NOT_EQUAL       reduce using rule 74 (condiciones -> condicion .)
    LESS_THAN       reduce using rule 74 (condiciones -> condicion .)
    LESS_EQUAL      reduce using rule 74 (condiciones -> condicion .)
    GREATER_THAN    reduce using rule 74 (condiciones -> condicion .)
    GREATER_EQUAL   reduce using rule 74 (condiciones -> condicion .)
    EQUAL           reduce using rule 74 (condiciones -> condicion .)
    $end            reduce using rule 74 (condiciones -> condicion .)
    RBRACE          reduce using rule 74 (condiciones -> condicion .)
    CASE            reduce using rule 74 (condiciones -> condicion .)
    DEFAULT         reduce using rule 74 (condiciones -> condicion .)
    DOSPUNTOS       reduce using rule 74 (condiciones -> condicion .)
    COMMA           reduce using rule 74 (condiciones -> condicion .)
    SEMICOLON       reduce using rule 74 (condiciones -> condicion .)
    RPAREN          reduce using rule 74 (condiciones -> condicion .)
    AND             shift and go to state 103
    OR              shift and go to state 104

  ! AND             [ reduce using rule 74 (condiciones -> condicion .) ]
  ! OR              [ reduce using rule 74 (condiciones -> condicion .) ]

    conector                       shift and go to state 102

state 60

    (33) estructurasDeDatos -> mapa .

    PLUS            reduce using rule 33 (estructurasDeDatos -> mapa .)
    MINUS           reduce using rule 33 (estructurasDeDatos -> mapa .)
    TIMES           reduce using rule 33 (estructurasDeDatos -> mapa .)
    DIVIDE          reduce using rule 33 (estructurasDeDatos -> mapa .)
    MOD             reduce using rule 33 (estructurasDeDatos -> mapa .)
    NOT_EQUAL       reduce using rule 33 (estructurasDeDatos -> mapa .)
    LESS_THAN       reduce using rule 33 (estructurasDeDatos -> mapa .)
    LESS_EQUAL      reduce using rule 33 (estructurasDeDatos -> mapa .)
    GREATER_THAN    reduce using rule 33 (estructurasDeDatos -> mapa .)
    GREATER_EQUAL   reduce using rule 33 (estructurasDeDatos -> mapa .)
    EQUAL           reduce using rule 33 (estructurasDeDatos -> mapa .)
    $end            reduce using rule 33 (estructurasDeDatos -> mapa .)
    RBRACE          reduce using rule 33 (estructurasDeDatos -> mapa .)
    CASE            reduce using rule 33 (estructurasDeDatos -> mapa .)
    DEFAULT         reduce using rule 33 (estructurasDeDatos -> mapa .)
    COMMA           reduce using rule 33 (estructurasDeDatos -> mapa .)
    DOSPUNTOS       reduce using rule 33 (estructurasDeDatos -> mapa .)
    SEMICOLON       reduce using rule 33 (estructurasDeDatos -> mapa .)
    RPAREN          reduce using rule 33 (estructurasDeDatos -> mapa .)
    AND             reduce using rule 33 (estructurasDeDatos -> mapa .)
    OR              reduce using rule 33 (estructurasDeDatos -> mapa .)


state 61

    (34) estructurasDeDatos -> array .

    PLUS            reduce using rule 34 (estructurasDeDatos -> array .)
    MINUS           reduce using rule 34 (estructurasDeDatos -> array .)
    TIMES           reduce using rule 34 (estructurasDeDatos -> array .)
    DIVIDE          reduce using rule 34 (estructurasDeDatos -> array .)
    MOD             reduce using rule 34 (estructurasDeDatos -> array .)
    NOT_EQUAL       reduce using rule 34 (estructurasDeDatos -> array .)
    LESS_THAN       reduce using rule 34 (estructurasDeDatos -> array .)
    LESS_EQUAL      reduce using rule 34 (estructurasDeDatos -> array .)
    GREATER_THAN    reduce using rule 34 (estructurasDeDatos -> array .)
    GREATER_EQUAL   reduce using rule 34 (estructurasDeDatos -> array .)
    EQUAL           reduce using rule 34 (estructurasDeDatos -> array .)
    $end            reduce using rule 34 (estructurasDeDatos -> array .)
    RBRACE          reduce using rule 34 (estructurasDeDatos -> array .)
    CASE            reduce using rule 34 (estructurasDeDatos -> array .)
    DEFAULT         reduce using rule 34 (estructurasDeDatos -> array .)
    COMMA           reduce using rule 34 (estructurasDeDatos -> array .)
    DOSPUNTOS       reduce using rule 34 (estructurasDeDatos -> array .)
    SEMICOLON       reduce using rule 34 (estructurasDeDatos -> array .)
    RPAREN          reduce using rule 34 (estructurasDeDatos -> array .)
    AND             reduce using rule 34 (estructurasDeDatos -> array .)
    OR              reduce using rule 34 (estructurasDeDatos -> array .)


state 62

    (68) expresionAritmetica -> LPAREN . valor operador valor RPAREN
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 105
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 63

    (21) sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch . casoDefault RBRACE
    (28) casoDefault -> . DEFAULT DOSPUNTOS subcodigo
    (29) casoDefault -> . empty
    (86) empty -> .

    DEFAULT         shift and go to state 68
    RBRACE          reduce using rule 86 (empty -> .)

    casoDefault                    shift and go to state 106
    empty                          shift and go to state 69

state 64

    (30) bloqueCasosSwitch -> casoSwitch .
    (31) bloqueCasosSwitch -> casoSwitch . bloqueCasosSwitch
    (30) bloqueCasosSwitch -> . casoSwitch
    (31) bloqueCasosSwitch -> . casoSwitch bloqueCasosSwitch
    (32) casoSwitch -> . CASE valores DOSPUNTOS subcodigo

    DEFAULT         reduce using rule 30 (bloqueCasosSwitch -> casoSwitch .)
    RBRACE          reduce using rule 30 (bloqueCasosSwitch -> casoSwitch .)
    CASE            shift and go to state 65

    casoSwitch                     shift and go to state 64
    bloqueCasosSwitch              shift and go to state 107

state 65

    (32) casoSwitch -> CASE . valores DOSPUNTOS subcodigo
    (54) valores -> . valor
    (55) valores -> . valor COMMA valores
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valores                        shift and go to state 108
    valor                          shift and go to state 109
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 66

    (48) asignacionCorta -> ID DOSPUNTOS ASSIGN . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 110
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 67

    (23) sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault . RBRACE

    RBRACE          shift and go to state 111


state 68

    (28) casoDefault -> DEFAULT . DOSPUNTOS subcodigo

    DOSPUNTOS       shift and go to state 112


state 69

    (29) casoDefault -> empty .

    RBRACE          reduce using rule 29 (casoDefault -> empty .)


state 70

    (25) bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos .

    DEFAULT         reduce using rule 25 (bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos .)
    RBRACE          reduce using rule 25 (bloqueCasosBooleanos -> casoBooleano bloqueCasosBooleanos .)


state 71

    (26) casoBooleano -> CASE condiciones . DOSPUNTOS subcodigo
    (62) valor -> condiciones .

    DOSPUNTOS       shift and go to state 113
    NOT_EQUAL       reduce using rule 62 (valor -> condiciones .)
    LESS_THAN       reduce using rule 62 (valor -> condiciones .)
    LESS_EQUAL      reduce using rule 62 (valor -> condiciones .)
    GREATER_THAN    reduce using rule 62 (valor -> condiciones .)
    GREATER_EQUAL   reduce using rule 62 (valor -> condiciones .)
    EQUAL           reduce using rule 62 (valor -> condiciones .)
    PLUS            reduce using rule 62 (valor -> condiciones .)
    MINUS           reduce using rule 62 (valor -> condiciones .)
    TIMES           reduce using rule 62 (valor -> condiciones .)
    DIVIDE          reduce using rule 62 (valor -> condiciones .)
    MOD             reduce using rule 62 (valor -> condiciones .)


state 72

    (27) casoBooleano -> CASE ID . DOSPUNTOS subcodigo
    (63) valor -> ID .

    DOSPUNTOS       shift and go to state 114
    NOT_EQUAL       reduce using rule 63 (valor -> ID .)
    LESS_THAN       reduce using rule 63 (valor -> ID .)
    LESS_EQUAL      reduce using rule 63 (valor -> ID .)
    GREATER_THAN    reduce using rule 63 (valor -> ID .)
    GREATER_EQUAL   reduce using rule 63 (valor -> ID .)
    EQUAL           reduce using rule 63 (valor -> ID .)
    PLUS            reduce using rule 63 (valor -> ID .)
    MINUS           reduce using rule 63 (valor -> ID .)
    TIMES           reduce using rule 63 (valor -> ID .)
    DIVIDE          reduce using rule 63 (valor -> ID .)
    MOD             reduce using rule 63 (valor -> ID .)


state 73

    (78) condicion -> valor . operadorComp valor
    (67) expresionAritmetica -> valor . operador valor
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD

    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94

    operadorComp                   shift and go to state 89
    operador                       shift and go to state 88

state 74

    (79) condicion -> BOOL .
    (59) valor -> BOOL .

  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for EQUAL resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for PLUS resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for TIMES resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 59 (valor -> BOOL .)
  ! reduce/reduce conflict for MOD resolved using rule 59 (valor -> BOOL .)
    AND             reduce using rule 79 (condicion -> BOOL .)
    OR              reduce using rule 79 (condicion -> BOOL .)
    DOSPUNTOS       reduce using rule 79 (condicion -> BOOL .)
    $end            reduce using rule 79 (condicion -> BOOL .)
    RBRACE          reduce using rule 79 (condicion -> BOOL .)
    CASE            reduce using rule 79 (condicion -> BOOL .)
    DEFAULT         reduce using rule 79 (condicion -> BOOL .)
    COMMA           reduce using rule 79 (condicion -> BOOL .)
    SEMICOLON       reduce using rule 79 (condicion -> BOOL .)
    RPAREN          reduce using rule 79 (condicion -> BOOL .)
    NOT_EQUAL       reduce using rule 59 (valor -> BOOL .)
    LESS_THAN       reduce using rule 59 (valor -> BOOL .)
    LESS_EQUAL      reduce using rule 59 (valor -> BOOL .)
    GREATER_THAN    reduce using rule 59 (valor -> BOOL .)
    GREATER_EQUAL   reduce using rule 59 (valor -> BOOL .)
    EQUAL           reduce using rule 59 (valor -> BOOL .)
    PLUS            reduce using rule 59 (valor -> BOOL .)
    MINUS           reduce using rule 59 (valor -> BOOL .)
    TIMES           reduce using rule 59 (valor -> BOOL .)
    DIVIDE          reduce using rule 59 (valor -> BOOL .)
    MOD             reduce using rule 59 (valor -> BOOL .)

  ! NOT_EQUAL       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! LESS_THAN       [ reduce using rule 79 (condicion -> BOOL .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (condicion -> BOOL .) ]
  ! GREATER_THAN    [ reduce using rule 79 (condicion -> BOOL .) ]
  ! GREATER_EQUAL   [ reduce using rule 79 (condicion -> BOOL .) ]
  ! EQUAL           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! PLUS            [ reduce using rule 79 (condicion -> BOOL .) ]
  ! MINUS           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! TIMES           [ reduce using rule 79 (condicion -> BOOL .) ]
  ! DIVIDE          [ reduce using rule 79 (condicion -> BOOL .) ]
  ! MOD             [ reduce using rule 79 (condicion -> BOOL .) ]


state 75

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID . LBRACE bloqueCasosSwitch casoDefault RBRACE

    LBRACE          shift and go to state 115


state 76

    (9) funcion -> FUNC ID LPAREN argumentos . RPAREN LBRACE subcodigo RBRACE

    RPAREN          shift and go to state 116


state 77

    (16) funcionSinArg -> FUNC ID LPAREN RPAREN . LBRACE subcodigo RBRACE

    LBRACE          shift and go to state 117


state 78

    (17) funcionAnonima -> FUNC LPAREN RPAREN LBRACE . subcodigo RBRACE LPAREN RPAREN
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 118
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 79

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN . LBRACE subcodigo RBRACE LPAREN RPAREN

    LBRACE          shift and go to state 122


state 80

    (12) argumentos -> argumento COMMA . argumentos
    (10) argumentos -> . argumento
    (11) argumentos -> . argumentoVariadico
    (12) argumentos -> . argumento COMMA argumentos
    (13) argumentos -> . argumentoVariadico COMMA argumentos
    (14) argumento -> . ID tipoDato
    (15) argumentoVariadico -> . ID PUNTO PUNTO PUNTO tipoDato

    ID              shift and go to state 43

    argumento                      shift and go to state 41
    argumentos                     shift and go to state 123
    argumentoVariadico             shift and go to state 42

state 81

    (13) argumentos -> argumentoVariadico COMMA . argumentos
    (10) argumentos -> . argumento
    (11) argumentos -> . argumentoVariadico
    (12) argumentos -> . argumento COMMA argumentos
    (13) argumentos -> . argumentoVariadico COMMA argumentos
    (14) argumento -> . ID tipoDato
    (15) argumentoVariadico -> . ID PUNTO PUNTO PUNTO tipoDato

    ID              shift and go to state 43

    argumentoVariadico             shift and go to state 42
    argumentos                     shift and go to state 124
    argumento                      shift and go to state 41

state 82

    (14) argumento -> ID tipoDato .

    COMMA           reduce using rule 14 (argumento -> ID tipoDato .)
    RPAREN          reduce using rule 14 (argumento -> ID tipoDato .)


state 83

    (15) argumentoVariadico -> ID PUNTO . PUNTO PUNTO tipoDato

    PUNTO           shift and go to state 125


state 84

    (87) imprimir -> FMT PUNTO PRINT_LN LPAREN . valores RPAREN
    (88) imprimir -> FMT PUNTO PRINT_LN LPAREN . RPAREN
    (54) valores -> . valor
    (55) valores -> . valor COMMA valores
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    RPAREN          shift and go to state 127
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valores                        shift and go to state 126
    valor                          shift and go to state 109
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 85

    (35) mapa -> MAP LBRACKET tipoDato RBRACKET . tipoDato LBRACE RBRACE
    (36) mapa -> MAP LBRACKET tipoDato RBRACKET . tipoDato
    (37) mapa -> MAP LBRACKET tipoDato RBRACKET . tipoDato LBRACE elementosMapa RBRACE
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 128

state 86

    (41) array -> LBRACKET INT RBRACKET tipoDato .
    (42) array -> LBRACKET INT RBRACKET tipoDato . LBRACE RBRACE
    (43) array -> LBRACKET INT RBRACKET tipoDato . LBRACE elementosArray RBRACE

    $end            reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    PLUS            reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    MINUS           reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    TIMES           reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    DIVIDE          reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    MOD             reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    NOT_EQUAL       reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    LESS_THAN       reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    LESS_EQUAL      reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    GREATER_THAN    reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    GREATER_EQUAL   reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    EQUAL           reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    RBRACE          reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    CASE            reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    DEFAULT         reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    COMMA           reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    DOSPUNTOS       reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    SEMICOLON       reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    RPAREN          reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    AND             reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    OR              reduce using rule 41 (array -> LBRACKET INT RBRACKET tipoDato .)
    LBRACE          shift and go to state 129


state 87

    (46) asignacion -> VAR ID tipoDato ASSIGN valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    $end            reduce using rule 46 (asignacion -> VAR ID tipoDato ASSIGN valor .)
    RBRACE          reduce using rule 46 (asignacion -> VAR ID tipoDato ASSIGN valor .)
    CASE            reduce using rule 46 (asignacion -> VAR ID tipoDato ASSIGN valor .)
    DEFAULT         reduce using rule 46 (asignacion -> VAR ID tipoDato ASSIGN valor .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 88

    (67) expresionAritmetica -> valor operador . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 130
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 89

    (78) condicion -> valor operadorComp . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 131
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 90

    (69) operador -> PLUS .

    FLOAT64         reduce using rule 69 (operador -> PLUS .)
    COMPLEX64       reduce using rule 69 (operador -> PLUS .)
    INT             reduce using rule 69 (operador -> PLUS .)
    BOOL            reduce using rule 69 (operador -> PLUS .)
    STRING          reduce using rule 69 (operador -> PLUS .)
    ID              reduce using rule 69 (operador -> PLUS .)
    LPAREN          reduce using rule 69 (operador -> PLUS .)
    MAP             reduce using rule 69 (operador -> PLUS .)
    LBRACKET        reduce using rule 69 (operador -> PLUS .)


state 91

    (70) operador -> MINUS .

    FLOAT64         reduce using rule 70 (operador -> MINUS .)
    COMPLEX64       reduce using rule 70 (operador -> MINUS .)
    INT             reduce using rule 70 (operador -> MINUS .)
    BOOL            reduce using rule 70 (operador -> MINUS .)
    STRING          reduce using rule 70 (operador -> MINUS .)
    ID              reduce using rule 70 (operador -> MINUS .)
    LPAREN          reduce using rule 70 (operador -> MINUS .)
    MAP             reduce using rule 70 (operador -> MINUS .)
    LBRACKET        reduce using rule 70 (operador -> MINUS .)


state 92

    (71) operador -> TIMES .

    FLOAT64         reduce using rule 71 (operador -> TIMES .)
    COMPLEX64       reduce using rule 71 (operador -> TIMES .)
    INT             reduce using rule 71 (operador -> TIMES .)
    BOOL            reduce using rule 71 (operador -> TIMES .)
    STRING          reduce using rule 71 (operador -> TIMES .)
    ID              reduce using rule 71 (operador -> TIMES .)
    LPAREN          reduce using rule 71 (operador -> TIMES .)
    MAP             reduce using rule 71 (operador -> TIMES .)
    LBRACKET        reduce using rule 71 (operador -> TIMES .)


state 93

    (72) operador -> DIVIDE .

    FLOAT64         reduce using rule 72 (operador -> DIVIDE .)
    COMPLEX64       reduce using rule 72 (operador -> DIVIDE .)
    INT             reduce using rule 72 (operador -> DIVIDE .)
    BOOL            reduce using rule 72 (operador -> DIVIDE .)
    STRING          reduce using rule 72 (operador -> DIVIDE .)
    ID              reduce using rule 72 (operador -> DIVIDE .)
    LPAREN          reduce using rule 72 (operador -> DIVIDE .)
    MAP             reduce using rule 72 (operador -> DIVIDE .)
    LBRACKET        reduce using rule 72 (operador -> DIVIDE .)


state 94

    (73) operador -> MOD .

    FLOAT64         reduce using rule 73 (operador -> MOD .)
    COMPLEX64       reduce using rule 73 (operador -> MOD .)
    INT             reduce using rule 73 (operador -> MOD .)
    BOOL            reduce using rule 73 (operador -> MOD .)
    STRING          reduce using rule 73 (operador -> MOD .)
    ID              reduce using rule 73 (operador -> MOD .)
    LPAREN          reduce using rule 73 (operador -> MOD .)
    MAP             reduce using rule 73 (operador -> MOD .)
    LBRACKET        reduce using rule 73 (operador -> MOD .)


state 95

    (80) operadorComp -> NOT_EQUAL .

    FLOAT64         reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    COMPLEX64       reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    INT             reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    BOOL            reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    STRING          reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    ID              reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    LPAREN          reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    MAP             reduce using rule 80 (operadorComp -> NOT_EQUAL .)
    LBRACKET        reduce using rule 80 (operadorComp -> NOT_EQUAL .)


state 96

    (81) operadorComp -> LESS_THAN .

    FLOAT64         reduce using rule 81 (operadorComp -> LESS_THAN .)
    COMPLEX64       reduce using rule 81 (operadorComp -> LESS_THAN .)
    INT             reduce using rule 81 (operadorComp -> LESS_THAN .)
    BOOL            reduce using rule 81 (operadorComp -> LESS_THAN .)
    STRING          reduce using rule 81 (operadorComp -> LESS_THAN .)
    ID              reduce using rule 81 (operadorComp -> LESS_THAN .)
    LPAREN          reduce using rule 81 (operadorComp -> LESS_THAN .)
    MAP             reduce using rule 81 (operadorComp -> LESS_THAN .)
    LBRACKET        reduce using rule 81 (operadorComp -> LESS_THAN .)


state 97

    (82) operadorComp -> LESS_EQUAL .

    FLOAT64         reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    COMPLEX64       reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    INT             reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    BOOL            reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    STRING          reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    ID              reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    LPAREN          reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    MAP             reduce using rule 82 (operadorComp -> LESS_EQUAL .)
    LBRACKET        reduce using rule 82 (operadorComp -> LESS_EQUAL .)


state 98

    (83) operadorComp -> GREATER_THAN .

    FLOAT64         reduce using rule 83 (operadorComp -> GREATER_THAN .)
    COMPLEX64       reduce using rule 83 (operadorComp -> GREATER_THAN .)
    INT             reduce using rule 83 (operadorComp -> GREATER_THAN .)
    BOOL            reduce using rule 83 (operadorComp -> GREATER_THAN .)
    STRING          reduce using rule 83 (operadorComp -> GREATER_THAN .)
    ID              reduce using rule 83 (operadorComp -> GREATER_THAN .)
    LPAREN          reduce using rule 83 (operadorComp -> GREATER_THAN .)
    MAP             reduce using rule 83 (operadorComp -> GREATER_THAN .)
    LBRACKET        reduce using rule 83 (operadorComp -> GREATER_THAN .)


state 99

    (84) operadorComp -> GREATER_EQUAL .

    FLOAT64         reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    COMPLEX64       reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    INT             reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    BOOL            reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    STRING          reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    ID              reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    LPAREN          reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    MAP             reduce using rule 84 (operadorComp -> GREATER_EQUAL .)
    LBRACKET        reduce using rule 84 (operadorComp -> GREATER_EQUAL .)


state 100

    (85) operadorComp -> EQUAL .

    FLOAT64         reduce using rule 85 (operadorComp -> EQUAL .)
    COMPLEX64       reduce using rule 85 (operadorComp -> EQUAL .)
    INT             reduce using rule 85 (operadorComp -> EQUAL .)
    BOOL            reduce using rule 85 (operadorComp -> EQUAL .)
    STRING          reduce using rule 85 (operadorComp -> EQUAL .)
    ID              reduce using rule 85 (operadorComp -> EQUAL .)
    LPAREN          reduce using rule 85 (operadorComp -> EQUAL .)
    MAP             reduce using rule 85 (operadorComp -> EQUAL .)
    LBRACKET        reduce using rule 85 (operadorComp -> EQUAL .)


state 101

    (66) expresionesAritmeticas -> expresionAritmetica operador . expresionesAritmeticas
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    LPAREN          shift and go to state 62
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    expresionAritmetica            shift and go to state 58
    expresionesAritmeticas         shift and go to state 132
    valor                          shift and go to state 133
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 102

    (75) condiciones -> condicion conector . condiciones
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    BOOL            shift and go to state 74
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    condicion                      shift and go to state 59
    condiciones                    shift and go to state 134
    valor                          shift and go to state 73
    expresionesAritmeticas         shift and go to state 55
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 103

    (76) conector -> AND .

    BOOL            reduce using rule 76 (conector -> AND .)
    FLOAT64         reduce using rule 76 (conector -> AND .)
    COMPLEX64       reduce using rule 76 (conector -> AND .)
    INT             reduce using rule 76 (conector -> AND .)
    STRING          reduce using rule 76 (conector -> AND .)
    ID              reduce using rule 76 (conector -> AND .)
    LPAREN          reduce using rule 76 (conector -> AND .)
    MAP             reduce using rule 76 (conector -> AND .)
    LBRACKET        reduce using rule 76 (conector -> AND .)


state 104

    (77) conector -> OR .

    BOOL            reduce using rule 77 (conector -> OR .)
    FLOAT64         reduce using rule 77 (conector -> OR .)
    COMPLEX64       reduce using rule 77 (conector -> OR .)
    INT             reduce using rule 77 (conector -> OR .)
    STRING          reduce using rule 77 (conector -> OR .)
    ID              reduce using rule 77 (conector -> OR .)
    LPAREN          reduce using rule 77 (conector -> OR .)
    MAP             reduce using rule 77 (conector -> OR .)
    LBRACKET        reduce using rule 77 (conector -> OR .)


state 105

    (68) expresionAritmetica -> LPAREN valor . operador valor RPAREN
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 135
    operadorComp                   shift and go to state 89

state 106

    (21) sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault . RBRACE

    RBRACE          shift and go to state 136


state 107

    (31) bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch .

    DEFAULT         reduce using rule 31 (bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch .)
    RBRACE          reduce using rule 31 (bloqueCasosSwitch -> casoSwitch bloqueCasosSwitch .)


state 108

    (32) casoSwitch -> CASE valores . DOSPUNTOS subcodigo

    DOSPUNTOS       shift and go to state 137


state 109

    (54) valores -> valor .
    (55) valores -> valor . COMMA valores
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    DOSPUNTOS       reduce using rule 54 (valores -> valor .)
    RPAREN          reduce using rule 54 (valores -> valor .)
    COMMA           shift and go to state 138
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 110

    (48) asignacionCorta -> ID DOSPUNTOS ASSIGN valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    SEMICOLON       reduce using rule 48 (asignacionCorta -> ID DOSPUNTOS ASSIGN valor .)
    RBRACE          reduce using rule 48 (asignacionCorta -> ID DOSPUNTOS ASSIGN valor .)
    CASE            reduce using rule 48 (asignacionCorta -> ID DOSPUNTOS ASSIGN valor .)
    DEFAULT         reduce using rule 48 (asignacionCorta -> ID DOSPUNTOS ASSIGN valor .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 111

    (23) sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE .

    $end            reduce using rule 23 (sentenciaSwitch -> SWITCH LBRACE bloqueCasosBooleanos casoDefault RBRACE .)


state 112

    (28) casoDefault -> DEFAULT DOSPUNTOS . subcodigo
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 139
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 113

    (26) casoBooleano -> CASE condiciones DOSPUNTOS . subcodigo
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 140
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 114

    (27) casoBooleano -> CASE ID DOSPUNTOS . subcodigo
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 141
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 115

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE . bloqueCasosSwitch casoDefault RBRACE
    (30) bloqueCasosSwitch -> . casoSwitch
    (31) bloqueCasosSwitch -> . casoSwitch bloqueCasosSwitch
    (32) casoSwitch -> . CASE valores DOSPUNTOS subcodigo

    CASE            shift and go to state 65

    bloqueCasosSwitch              shift and go to state 142
    casoSwitch                     shift and go to state 64

state 116

    (9) funcion -> FUNC ID LPAREN argumentos RPAREN . LBRACE subcodigo RBRACE

    LBRACE          shift and go to state 143


state 117

    (16) funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE . subcodigo RBRACE
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 144
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 118

    (17) funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo . RBRACE LPAREN RPAREN

    RBRACE          shift and go to state 145


state 119

    (19) subcodigo -> asignacionCorta .

    RBRACE          reduce using rule 19 (subcodigo -> asignacionCorta .)
    CASE            reduce using rule 19 (subcodigo -> asignacionCorta .)
    DEFAULT         reduce using rule 19 (subcodigo -> asignacionCorta .)


state 120

    (20) subcodigo -> asignacion .

    RBRACE          reduce using rule 20 (subcodigo -> asignacion .)
    CASE            reduce using rule 20 (subcodigo -> asignacion .)
    DEFAULT         reduce using rule 20 (subcodigo -> asignacion .)


state 121

    (48) asignacionCorta -> ID . DOSPUNTOS ASSIGN valor

    DOSPUNTOS       shift and go to state 33


state 122

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE . subcodigo RBRACE LPAREN RPAREN
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 146
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 123

    (12) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 12 (argumentos -> argumento COMMA argumentos .)


state 124

    (13) argumentos -> argumentoVariadico COMMA argumentos .

    RPAREN          reduce using rule 13 (argumentos -> argumentoVariadico COMMA argumentos .)


state 125

    (15) argumentoVariadico -> ID PUNTO PUNTO . PUNTO tipoDato

    PUNTO           shift and go to state 147


state 126

    (87) imprimir -> FMT PUNTO PRINT_LN LPAREN valores . RPAREN

    RPAREN          shift and go to state 148


state 127

    (88) imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN .

    $end            reduce using rule 88 (imprimir -> FMT PUNTO PRINT_LN LPAREN RPAREN .)


state 128

    (35) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato . LBRACE RBRACE
    (36) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .
    (37) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato . LBRACE elementosMapa RBRACE

    LBRACE          shift and go to state 149
    $end            reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    PLUS            reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    MINUS           reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    TIMES           reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    DIVIDE          reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    MOD             reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    NOT_EQUAL       reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    LESS_THAN       reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    LESS_EQUAL      reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    GREATER_THAN    reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    GREATER_EQUAL   reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    EQUAL           reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    RBRACE          reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    CASE            reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    DEFAULT         reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    COMMA           reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    DOSPUNTOS       reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    SEMICOLON       reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    RPAREN          reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    AND             reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)
    OR              reduce using rule 36 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato .)


state 129

    (42) array -> LBRACKET INT RBRACKET tipoDato LBRACE . RBRACE
    (43) array -> LBRACKET INT RBRACKET tipoDato LBRACE . elementosArray RBRACE
    (44) elementosArray -> . valor
    (45) elementosArray -> . valor COMMA elementosArray
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    RBRACE          shift and go to state 150
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    elementosArray                 shift and go to state 151
    valor                          shift and go to state 152
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 130

    (67) expresionAritmetica -> valor operador valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    $end            reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    RBRACE          reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    CASE            reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    DEFAULT         reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    COMMA           reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    DOSPUNTOS       reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    SEMICOLON       reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    RPAREN          reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    AND             reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    OR              reduce using rule 67 (expresionAritmetica -> valor operador valor .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

  ! PLUS            [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! MINUS           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! TIMES           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! DIVIDE          [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! MOD             [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! NOT_EQUAL       [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! LESS_THAN       [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! LESS_EQUAL      [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! GREATER_THAN    [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! GREATER_EQUAL   [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! EQUAL           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 131

    (78) condicion -> valor operadorComp valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    AND             reduce using rule 78 (condicion -> valor operadorComp valor .)
    OR              reduce using rule 78 (condicion -> valor operadorComp valor .)
    $end            reduce using rule 78 (condicion -> valor operadorComp valor .)
    RBRACE          reduce using rule 78 (condicion -> valor operadorComp valor .)
    CASE            reduce using rule 78 (condicion -> valor operadorComp valor .)
    DEFAULT         reduce using rule 78 (condicion -> valor operadorComp valor .)
    DOSPUNTOS       reduce using rule 78 (condicion -> valor operadorComp valor .)
    COMMA           reduce using rule 78 (condicion -> valor operadorComp valor .)
    SEMICOLON       reduce using rule 78 (condicion -> valor operadorComp valor .)
    RPAREN          reduce using rule 78 (condicion -> valor operadorComp valor .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

  ! PLUS            [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! MINUS           [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! TIMES           [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! DIVIDE          [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! MOD             [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! NOT_EQUAL       [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! LESS_THAN       [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! LESS_EQUAL      [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! GREATER_THAN    [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! GREATER_EQUAL   [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]
  ! EQUAL           [ reduce using rule 78 (condicion -> valor operadorComp valor .) ]

    operadorComp                   shift and go to state 89
    operador                       shift and go to state 88

state 132

    (66) expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .
    (61) valor -> expresionesAritmeticas .

  ! reduce/reduce conflict for PLUS resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for MINUS resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for TIMES resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for MOD resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 61 (valor -> expresionesAritmeticas .)
  ! reduce/reduce conflict for EQUAL resolved using rule 61 (valor -> expresionesAritmeticas .)
    $end            reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    RBRACE          reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    CASE            reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    DEFAULT         reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    COMMA           reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    DOSPUNTOS       reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    SEMICOLON       reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    RPAREN          reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    AND             reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    OR              reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .)
    PLUS            reduce using rule 61 (valor -> expresionesAritmeticas .)
    MINUS           reduce using rule 61 (valor -> expresionesAritmeticas .)
    TIMES           reduce using rule 61 (valor -> expresionesAritmeticas .)
    DIVIDE          reduce using rule 61 (valor -> expresionesAritmeticas .)
    MOD             reduce using rule 61 (valor -> expresionesAritmeticas .)
    NOT_EQUAL       reduce using rule 61 (valor -> expresionesAritmeticas .)
    LESS_THAN       reduce using rule 61 (valor -> expresionesAritmeticas .)
    LESS_EQUAL      reduce using rule 61 (valor -> expresionesAritmeticas .)
    GREATER_THAN    reduce using rule 61 (valor -> expresionesAritmeticas .)
    GREATER_EQUAL   reduce using rule 61 (valor -> expresionesAritmeticas .)
    EQUAL           reduce using rule 61 (valor -> expresionesAritmeticas .)

  ! PLUS            [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! MINUS           [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! TIMES           [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! DIVIDE          [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! MOD             [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! NOT_EQUAL       [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! LESS_THAN       [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! LESS_EQUAL      [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! GREATER_THAN    [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! GREATER_EQUAL   [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]
  ! EQUAL           [ reduce using rule 66 (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas .) ]


state 133

    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 134

    (75) condiciones -> condicion conector condiciones .
    (62) valor -> condiciones .

  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for EQUAL resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for TIMES resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (valor -> condiciones .)
  ! reduce/reduce conflict for MOD resolved using rule 62 (valor -> condiciones .)
    $end            reduce using rule 75 (condiciones -> condicion conector condiciones .)
    RBRACE          reduce using rule 75 (condiciones -> condicion conector condiciones .)
    CASE            reduce using rule 75 (condiciones -> condicion conector condiciones .)
    DEFAULT         reduce using rule 75 (condiciones -> condicion conector condiciones .)
    DOSPUNTOS       reduce using rule 75 (condiciones -> condicion conector condiciones .)
    COMMA           reduce using rule 75 (condiciones -> condicion conector condiciones .)
    SEMICOLON       reduce using rule 75 (condiciones -> condicion conector condiciones .)
    RPAREN          reduce using rule 75 (condiciones -> condicion conector condiciones .)
    AND             reduce using rule 75 (condiciones -> condicion conector condiciones .)
    OR              reduce using rule 75 (condiciones -> condicion conector condiciones .)
    NOT_EQUAL       reduce using rule 62 (valor -> condiciones .)
    LESS_THAN       reduce using rule 62 (valor -> condiciones .)
    LESS_EQUAL      reduce using rule 62 (valor -> condiciones .)
    GREATER_THAN    reduce using rule 62 (valor -> condiciones .)
    GREATER_EQUAL   reduce using rule 62 (valor -> condiciones .)
    EQUAL           reduce using rule 62 (valor -> condiciones .)
    PLUS            reduce using rule 62 (valor -> condiciones .)
    MINUS           reduce using rule 62 (valor -> condiciones .)
    TIMES           reduce using rule 62 (valor -> condiciones .)
    DIVIDE          reduce using rule 62 (valor -> condiciones .)
    MOD             reduce using rule 62 (valor -> condiciones .)

  ! PLUS            [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! MINUS           [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! TIMES           [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! DIVIDE          [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! MOD             [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! NOT_EQUAL       [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! LESS_THAN       [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! LESS_EQUAL      [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! GREATER_THAN    [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! GREATER_EQUAL   [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]
  ! EQUAL           [ reduce using rule 75 (condiciones -> condicion conector condiciones .) ]


state 135

    (68) expresionAritmetica -> LPAREN valor operador . valor RPAREN
    (67) expresionAritmetica -> valor operador . valor
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 153
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 136

    (21) sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE .

    $end            reduce using rule 21 (sentenciaSwitch -> SWITCH ID LBRACE bloqueCasosSwitch casoDefault RBRACE .)


state 137

    (32) casoSwitch -> CASE valores DOSPUNTOS . subcodigo
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 154
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 138

    (55) valores -> valor COMMA . valores
    (54) valores -> . valor
    (55) valores -> . valor COMMA valores
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 109
    valores                        shift and go to state 155
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 139

    (28) casoDefault -> DEFAULT DOSPUNTOS subcodigo .

    RBRACE          reduce using rule 28 (casoDefault -> DEFAULT DOSPUNTOS subcodigo .)


state 140

    (26) casoBooleano -> CASE condiciones DOSPUNTOS subcodigo .

    CASE            reduce using rule 26 (casoBooleano -> CASE condiciones DOSPUNTOS subcodigo .)
    DEFAULT         reduce using rule 26 (casoBooleano -> CASE condiciones DOSPUNTOS subcodigo .)
    RBRACE          reduce using rule 26 (casoBooleano -> CASE condiciones DOSPUNTOS subcodigo .)


state 141

    (27) casoBooleano -> CASE ID DOSPUNTOS subcodigo .

    CASE            reduce using rule 27 (casoBooleano -> CASE ID DOSPUNTOS subcodigo .)
    DEFAULT         reduce using rule 27 (casoBooleano -> CASE ID DOSPUNTOS subcodigo .)
    RBRACE          reduce using rule 27 (casoBooleano -> CASE ID DOSPUNTOS subcodigo .)


state 142

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch . casoDefault RBRACE
    (28) casoDefault -> . DEFAULT DOSPUNTOS subcodigo
    (29) casoDefault -> . empty
    (86) empty -> .

    DEFAULT         shift and go to state 68
    RBRACE          reduce using rule 86 (empty -> .)

    casoDefault                    shift and go to state 156
    empty                          shift and go to state 69

state 143

    (9) funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE . subcodigo RBRACE
    (19) subcodigo -> . asignacionCorta
    (20) subcodigo -> . asignacion
    (48) asignacionCorta -> . ID DOSPUNTOS ASSIGN valor
    (46) asignacion -> . VAR ID tipoDato ASSIGN valor
    (47) asignacion -> . VAR ID ASSIGN valor

    ID              shift and go to state 121
    VAR             shift and go to state 10

    subcodigo                      shift and go to state 157
    asignacionCorta                shift and go to state 119
    asignacion                     shift and go to state 120

state 144

    (16) funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo . RBRACE

    RBRACE          shift and go to state 158


state 145

    (17) funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE . LPAREN RPAREN

    LPAREN          shift and go to state 159


state 146

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo . RBRACE LPAREN RPAREN

    RBRACE          shift and go to state 160


state 147

    (15) argumentoVariadico -> ID PUNTO PUNTO PUNTO . tipoDato
    (49) tipoDato -> . FLOAT64_TYPE
    (50) tipoDato -> . COMPLEX64_TYPE
    (51) tipoDato -> . INT_TYPE
    (52) tipoDato -> . BOOL_TYPE
    (53) tipoDato -> . STRING_TYPE

    FLOAT64_TYPE    shift and go to state 27
    COMPLEX64_TYPE  shift and go to state 28
    INT_TYPE        shift and go to state 29
    BOOL_TYPE       shift and go to state 30
    STRING_TYPE     shift and go to state 31

    tipoDato                       shift and go to state 161

state 148

    (87) imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN .

    $end            reduce using rule 87 (imprimir -> FMT PUNTO PRINT_LN LPAREN valores RPAREN .)


state 149

    (35) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE . RBRACE
    (37) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE . elementosMapa RBRACE
    (38) elementosMapa -> . elementoMapa
    (39) elementosMapa -> . elementoMapa elementosMapa
    (40) elementoMapa -> . valor DOSPUNTOS valor COMMA
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    RBRACE          shift and go to state 162
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    elementosMapa                  shift and go to state 163
    elementoMapa                   shift and go to state 164
    valor                          shift and go to state 165
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 150

    (42) array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .

    $end            reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    PLUS            reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    MINUS           reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    TIMES           reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    DIVIDE          reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    MOD             reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    NOT_EQUAL       reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    LESS_THAN       reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    LESS_EQUAL      reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    GREATER_THAN    reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    GREATER_EQUAL   reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    EQUAL           reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    RBRACE          reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    CASE            reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    DEFAULT         reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    COMMA           reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    DOSPUNTOS       reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    SEMICOLON       reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    RPAREN          reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    AND             reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)
    OR              reduce using rule 42 (array -> LBRACKET INT RBRACKET tipoDato LBRACE RBRACE .)


state 151

    (43) array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray . RBRACE

    RBRACE          shift and go to state 166


state 152

    (44) elementosArray -> valor .
    (45) elementosArray -> valor . COMMA elementosArray
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    RBRACE          reduce using rule 44 (elementosArray -> valor .)
    COMMA           shift and go to state 167
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 153

    (68) expresionAritmetica -> LPAREN valor operador valor . RPAREN
    (67) expresionAritmetica -> valor operador valor .
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    RPAREN          shift and go to state 168
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

  ! PLUS            [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! MINUS           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! TIMES           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! DIVIDE          [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! MOD             [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! NOT_EQUAL       [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! LESS_THAN       [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! LESS_EQUAL      [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! GREATER_THAN    [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! GREATER_EQUAL   [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]
  ! EQUAL           [ reduce using rule 67 (expresionAritmetica -> valor operador valor .) ]

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 154

    (32) casoSwitch -> CASE valores DOSPUNTOS subcodigo .

    CASE            reduce using rule 32 (casoSwitch -> CASE valores DOSPUNTOS subcodigo .)
    DEFAULT         reduce using rule 32 (casoSwitch -> CASE valores DOSPUNTOS subcodigo .)
    RBRACE          reduce using rule 32 (casoSwitch -> CASE valores DOSPUNTOS subcodigo .)


state 155

    (55) valores -> valor COMMA valores .

    DOSPUNTOS       reduce using rule 55 (valores -> valor COMMA valores .)
    RPAREN          reduce using rule 55 (valores -> valor COMMA valores .)


state 156

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault . RBRACE

    RBRACE          shift and go to state 169


state 157

    (9) funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo . RBRACE

    RBRACE          shift and go to state 170


state 158

    (16) funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE .

    $end            reduce using rule 16 (funcionSinArg -> FUNC ID LPAREN RPAREN LBRACE subcodigo RBRACE .)


state 159

    (17) funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN . RPAREN

    RPAREN          shift and go to state 171


state 160

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE . LPAREN RPAREN

    LPAREN          shift and go to state 172


state 161

    (15) argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato .

    COMMA           reduce using rule 15 (argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato .)
    RPAREN          reduce using rule 15 (argumentoVariadico -> ID PUNTO PUNTO PUNTO tipoDato .)


state 162

    (35) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .

    $end            reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    PLUS            reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    MINUS           reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    TIMES           reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    DIVIDE          reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    MOD             reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    NOT_EQUAL       reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    LESS_THAN       reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    LESS_EQUAL      reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    GREATER_THAN    reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    GREATER_EQUAL   reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    EQUAL           reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    RBRACE          reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    CASE            reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    DEFAULT         reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    COMMA           reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    DOSPUNTOS       reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    SEMICOLON       reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    RPAREN          reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    AND             reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)
    OR              reduce using rule 35 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE .)


state 163

    (37) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa . RBRACE

    RBRACE          shift and go to state 173


state 164

    (38) elementosMapa -> elementoMapa .
    (39) elementosMapa -> elementoMapa . elementosMapa
    (38) elementosMapa -> . elementoMapa
    (39) elementosMapa -> . elementoMapa elementosMapa
    (40) elementoMapa -> . valor DOSPUNTOS valor COMMA
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    RBRACE          reduce using rule 38 (elementosMapa -> elementoMapa .)
    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    elementoMapa                   shift and go to state 164
    elementosMapa                  shift and go to state 174
    valor                          shift and go to state 165
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 165

    (40) elementoMapa -> valor . DOSPUNTOS valor COMMA
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    DOSPUNTOS       shift and go to state 175
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 166

    (43) array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .

    $end            reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    PLUS            reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    MINUS           reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    TIMES           reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    DIVIDE          reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    MOD             reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    NOT_EQUAL       reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    LESS_THAN       reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    LESS_EQUAL      reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    GREATER_THAN    reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    GREATER_EQUAL   reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    EQUAL           reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    RBRACE          reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    CASE            reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    DEFAULT         reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    COMMA           reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    DOSPUNTOS       reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    SEMICOLON       reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    RPAREN          reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    AND             reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)
    OR              reduce using rule 43 (array -> LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE .)


state 167

    (45) elementosArray -> valor COMMA . elementosArray
    (44) elementosArray -> . valor
    (45) elementosArray -> . valor COMMA elementosArray
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 152
    elementosArray                 shift and go to state 176
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 168

    (68) expresionAritmetica -> LPAREN valor operador valor RPAREN .

    PLUS            reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    MINUS           reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    TIMES           reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    DIVIDE          reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    MOD             reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    NOT_EQUAL       reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    LESS_THAN       reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    LESS_EQUAL      reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    GREATER_THAN    reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    GREATER_EQUAL   reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    EQUAL           reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    $end            reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    RBRACE          reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    CASE            reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    DEFAULT         reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    COMMA           reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    DOSPUNTOS       reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    SEMICOLON       reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    RPAREN          reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    AND             reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)
    OR              reduce using rule 68 (expresionAritmetica -> LPAREN valor operador valor RPAREN .)


state 169

    (22) sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE .

    $end            reduce using rule 22 (sentenciaSwitch -> SWITCH asignacionCorta SEMICOLON ID LBRACE bloqueCasosSwitch casoDefault RBRACE .)


state 170

    (9) funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE .

    $end            reduce using rule 9 (funcion -> FUNC ID LPAREN argumentos RPAREN LBRACE subcodigo RBRACE .)


state 171

    (17) funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN .

    $end            reduce using rule 17 (funcionAnonima -> FUNC LPAREN RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN .)


state 172

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN . RPAREN

    RPAREN          shift and go to state 177


state 173

    (37) mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .

    $end            reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    PLUS            reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    MINUS           reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    TIMES           reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    DIVIDE          reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    MOD             reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    NOT_EQUAL       reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    LESS_THAN       reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    LESS_EQUAL      reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    GREATER_THAN    reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    GREATER_EQUAL   reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    EQUAL           reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    RBRACE          reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    CASE            reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    DEFAULT         reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    COMMA           reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    DOSPUNTOS       reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    SEMICOLON       reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    RPAREN          reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    AND             reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)
    OR              reduce using rule 37 (mapa -> MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE .)


state 174

    (39) elementosMapa -> elementoMapa elementosMapa .

    RBRACE          reduce using rule 39 (elementosMapa -> elementoMapa elementosMapa .)


state 175

    (40) elementoMapa -> valor DOSPUNTOS . valor COMMA
    (56) valor -> . FLOAT64
    (57) valor -> . COMPLEX64
    (58) valor -> . INT
    (59) valor -> . BOOL
    (60) valor -> . STRING
    (61) valor -> . expresionesAritmeticas
    (62) valor -> . condiciones
    (63) valor -> . ID
    (64) valor -> . estructurasDeDatos
    (65) expresionesAritmeticas -> . expresionAritmetica
    (66) expresionesAritmeticas -> . expresionAritmetica operador expresionesAritmeticas
    (74) condiciones -> . condicion
    (75) condiciones -> . condicion conector condiciones
    (33) estructurasDeDatos -> . mapa
    (34) estructurasDeDatos -> . array
    (67) expresionAritmetica -> . valor operador valor
    (68) expresionAritmetica -> . LPAREN valor operador valor RPAREN
    (78) condicion -> . valor operadorComp valor
    (79) condicion -> . BOOL
    (35) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE RBRACE
    (36) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato
    (37) mapa -> . MAP LBRACKET tipoDato RBRACKET tipoDato LBRACE elementosMapa RBRACE
    (41) array -> . LBRACKET INT RBRACKET tipoDato
    (42) array -> . LBRACKET INT RBRACKET tipoDato LBRACE RBRACE
    (43) array -> . LBRACKET INT RBRACKET tipoDato LBRACE elementosArray RBRACE

    FLOAT64         shift and go to state 50
    COMPLEX64       shift and go to state 51
    INT             shift and go to state 52
    BOOL            shift and go to state 53
    STRING          shift and go to state 54
    ID              shift and go to state 48
    LPAREN          shift and go to state 62
    MAP             shift and go to state 14
    LBRACKET        shift and go to state 15

    valor                          shift and go to state 178
    expresionesAritmeticas         shift and go to state 55
    condiciones                    shift and go to state 56
    estructurasDeDatos             shift and go to state 57
    expresionAritmetica            shift and go to state 58
    condicion                      shift and go to state 59
    mapa                           shift and go to state 60
    array                          shift and go to state 61

state 176

    (45) elementosArray -> valor COMMA elementosArray .

    RBRACE          reduce using rule 45 (elementosArray -> valor COMMA elementosArray .)


state 177

    (18) funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN .

    $end            reduce using rule 18 (funcionAnonima -> FUNC LPAREN argumentos RPAREN LBRACE subcodigo RBRACE LPAREN RPAREN .)


state 178

    (40) elementoMapa -> valor DOSPUNTOS valor . COMMA
    (67) expresionAritmetica -> valor . operador valor
    (78) condicion -> valor . operadorComp valor
    (69) operador -> . PLUS
    (70) operador -> . MINUS
    (71) operador -> . TIMES
    (72) operador -> . DIVIDE
    (73) operador -> . MOD
    (80) operadorComp -> . NOT_EQUAL
    (81) operadorComp -> . LESS_THAN
    (82) operadorComp -> . LESS_EQUAL
    (83) operadorComp -> . GREATER_THAN
    (84) operadorComp -> . GREATER_EQUAL
    (85) operadorComp -> . EQUAL

    COMMA           shift and go to state 179
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    LESS_THAN       shift and go to state 96
    LESS_EQUAL      shift and go to state 97
    GREATER_THAN    shift and go to state 98
    GREATER_EQUAL   shift and go to state 99
    EQUAL           shift and go to state 100

    operador                       shift and go to state 88
    operadorComp                   shift and go to state 89

state 179

    (40) elementoMapa -> valor DOSPUNTOS valor COMMA .

    FLOAT64         reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    COMPLEX64       reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    INT             reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    BOOL            reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    STRING          reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    ID              reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    LPAREN          reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    MAP             reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    LBRACKET        reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)
    RBRACE          reduce using rule 40 (elementoMapa -> valor DOSPUNTOS valor COMMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for MOD in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for MOD in state 130 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 153 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 153 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 153 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (valor -> BOOL)
WARNING: rejected rule (condicion -> BOOL) in state 53
WARNING: reduce/reduce conflict in state 74 resolved using rule (valor -> BOOL)
WARNING: rejected rule (condicion -> BOOL) in state 74
WARNING: reduce/reduce conflict in state 132 resolved using rule (valor -> expresionesAritmeticas)
WARNING: rejected rule (expresionesAritmeticas -> expresionAritmetica operador expresionesAritmeticas) in state 132
WARNING: reduce/reduce conflict in state 134 resolved using rule (valor -> condiciones)
WARNING: rejected rule (condiciones -> condicion conector condiciones) in state 134
